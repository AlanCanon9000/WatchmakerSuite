{************************************************************    Dialogs.p    Pascal Interface to the Dialog Manager        Copyright Apple Computer, Inc.     1985-1992        All rights reserved	Change History (most recent first):		<17>	 12/8/92	JSM		SoundProcPtr takes a short, just update the comment in this file									since everything is a ProcPtr here.		<16>	 11/7/92	JDR		Added the now publicly defined routines, StdFilterProc,									GetStdFilterProc, SetDialogDefaultItem, SetDialogCancelItem,									SetDialogTracksCursor.		<15>	 6/26/92	DCL		Miner Formatting Changes. Digging deep for things to do. Getting									the file ready for ETO 8.		<14>	  4/6/92	DCL		For New Inside Mac: Adding fancy new improved names for old									crusty routines. And getting rid of CouldDialog, FreeDialog,									CouldAlert, FreeAlert. #1025005		<13>	 8/28/91	CH		Updated interface headers for consistency.		<12>	 7/24/91	JL		Changed param name from theDITL to theHandle in AppendDITL to									match database. Updated copyright notice. Adjusted file to match									database.		<11>	 6/25/91	JNG		Add dialog manipulation routines from CTBUtilities.p		<10>	 1/27/91	LN		Checked in Database generate file from DSG.		 <9>	 12/3/90	RLC		<ksm> Remove the private interfaces.		 <8>	 11/4/90	dba		Added UpdateDialog (synonym for UpdtDialog).		 <7>	10/10/90	JL		Added Inline for SetDAFont		 <6>	  8/8/90	ngk		Add types for procedure pointers		 <5>	  7/2/90	KSM		Remove MarkWindowAsModal.		 <4>	 6/28/90	KSM		Add more new calls.		 <3>	  6/8/90	KSM		Add new DialogMgr dispatched routines.	To Do:************************************************************} UNIT Dialogs; INTERFACE USES Types, Windows, Quickdraw, TextEdit, Events;CONSTctrlItem = 4;btnCtrl = 0;chkCtrl = 1;radCtrl = 2;resCtrl = 3;statText = 8;editText = 16;iconItem = 32;picItem = 64;userItem = 0;itemDisable = 128;ok = 1;cancel = 2;stopIcon = 0;noteIcon = 1;cautionIcon = 2;TYPE{ Dialog Item List Manipulation Constants }DITLMethod = INTEGER;CONSToverlayDITL = 0;appendDITLRight = 1;appendDITLBottom = 2;TYPEStageList = PACKED RECORD boldItm4: 0..1;				{default button item number - 1} boxDrwn4: BOOLEAN;      	    {true if alert box to be drawn} sound4: 0..3;           	    {sound number} boldItm3: 0..1; boxDrwn3: BOOLEAN; sound3: 0..3; boldItm2: 0..1; boxDrwn2: BOOLEAN; sound2: 0..3; boldItm1: 0..1; boxDrwn1: BOOLEAN; sound1: 0..3; END;DialogPtr = WindowPtr;ResumeProcPtr = ProcPtr;		{ PROCEDURE Resume; }SoundProcPtr = ProcPtr;			{ PROCEDURE DoSound(soundNumber: INTEGER); }ModalFilterProcPtr = ProcPtr;   { FUNCTION Filter(theDialog: DialogPtr; VAR theEvent: EventRecord; VAR itemHit: INTEGER): BOOLEAN; }DialogPeek = ^DialogRecord;DialogRecord = RECORD window: WindowRecord; items: Handle; textH: TEHandle; editField: INTEGER; editOpen: INTEGER; aDefItem: INTEGER; END;DialogTPtr = ^DialogTemplate;DialogTHndl = ^DialogTPtr;DialogTemplate = RECORD boundsRect: Rect; procID: INTEGER; visible: BOOLEAN; filler1: BOOLEAN; goAwayFlag: BOOLEAN; filler2: BOOLEAN; refCon: LONGINT; itemsID: INTEGER; title: Str255; END;AlertTPtr = ^AlertTemplate;AlertTHndl = ^AlertTPtr;AlertTemplate = RECORD boundsRect: Rect; itemsID: INTEGER; stages: StageList; END;PROCEDURE InitDialogs(resumeProc: ResumeProcPtr);PROCEDURE ErrorSound(soundProc: SoundProcPtr);FUNCTION NewDialog(wStorage: Ptr;boundsRect: Rect;title: Str255;visible: BOOLEAN; procID: INTEGER;behind: WindowPtr;goAwayFlag: BOOLEAN;refCon: LONGINT; itmLstHndl: Handle): DialogPtr;FUNCTION GetNewDialog(dialogID: INTEGER;dStorage: Ptr;behind: WindowPtr): DialogPtr;PROCEDURE CloseDialog(theDialog: DialogPtr);PROCEDURE DisposDialog(theDialog: DialogPtr);PROCEDURE DisposeDialog(theDialog: DialogPtr);PROCEDURE ParamText(param0: Str255;param1: Str255;param2: Str255;param3: Str255);PROCEDURE ModalDialog(filterProc: ModalFilterProcPtr;VAR itemHit: INTEGER);FUNCTION IsDialogEvent(theEvent: EventRecord): BOOLEAN;FUNCTION DialogSelect(theEvent: EventRecord;VAR theDialog: DialogPtr;VAR itemHit: INTEGER): BOOLEAN;PROCEDURE DrawDialog(theDialog: DialogPtr);PROCEDURE UpdateDialog(theDialog: DialogPtr;updateRgn: RgnHandle);PROCEDURE UpdtDialog(theDialog: DialogPtr;updateRgn: RgnHandle);FUNCTION Alert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER;FUNCTION StopAlert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER;FUNCTION NoteAlert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER;FUNCTION CautionAlert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER;PROCEDURE GetDialogItem(theDialog: DialogPtr;itemNo: INTEGER;VAR itemType: INTEGER; VAR item: Handle;VAR box: Rect);PROCEDURE GetDItem(theDialog: DialogPtr;itemNo: INTEGER;VAR itemType: INTEGER; VAR item: Handle;VAR box: Rect);PROCEDURE SetDialogItem(theDialog: DialogPtr;itemNo: INTEGER;itemType: INTEGER; item: Handle;box: Rect);PROCEDURE SetDItem(theDialog: DialogPtr;itemNo: INTEGER;itemType: INTEGER; item: Handle;box: Rect);PROCEDURE HideDialogItem(theDialog: DialogPtr;itemNo: INTEGER);PROCEDURE HideDItem(theDialog: DialogPtr;itemNo: INTEGER);PROCEDURE ShowDialogItem(theDialog: DialogPtr;itemNo: INTEGER);PROCEDURE ShowDItem(theDialog: DialogPtr;itemNo: INTEGER);PROCEDURE SelectDialogItemText(theDialog: DialogPtr;itemNo: INTEGER;strtSel: INTEGER; endSel: INTEGER);PROCEDURE SelIText(theDialog: DialogPtr;itemNo: INTEGER;strtSel: INTEGER; endSel: INTEGER);PROCEDURE GetDialogItemText(item: Handle;VAR text: Str255);PROCEDURE GetIText(item: Handle;VAR text: Str255);PROCEDURE SetDialogItemText(item: Handle;text: Str255);PROCEDURE SetIText(item: Handle;text: Str255);FUNCTION FindDialogItem(theDialog: DialogPtr;thePt: Point): INTEGER;FUNCTION FindDItem(theDialog: DialogPtr;thePt: Point): INTEGER;FUNCTION NewColorDialog(dStorage: Ptr;boundsRect: Rect;title: Str255;visible: BOOLEAN; procID: INTEGER;behind: WindowPtr;goAwayFlag: BOOLEAN;refCon: LONGINT; items: Handle): DialogPtr;FUNCTION NewCDialog(dStorage: Ptr;boundsRect: Rect;title: Str255;visible: BOOLEAN; procID: INTEGER;behind: WindowPtr;goAwayFlag: BOOLEAN;refCon: LONGINT; items: Handle): DialogPtr;FUNCTION GetAlertStage: INTEGER;FUNCTION GetAlrtStage: INTEGER;PROCEDURE ResetAlertStage;PROCEDURE ResetAlrtStage;PROCEDURE DialogCut(theDialog: DialogPtr);PROCEDURE DlgCut(theDialog: DialogPtr);PROCEDURE DialogPaste(theDialog: DialogPtr);PROCEDURE DlgPaste(theDialog: DialogPtr);PROCEDURE DialogCopy(theDialog: DialogPtr);PROCEDURE DlgCopy(theDialog: DialogPtr);PROCEDURE DialogDelete(theDialog: DialogPtr);PROCEDURE DlgDelete(theDialog: DialogPtr);PROCEDURE SetDialogFont(fontNum: INTEGER);PROCEDURE SetDAFont(fontNum: INTEGER);PROCEDURE AppendDITL(theDialog: DialogPtr;theHandle: Handle;method: DITLMethod);FUNCTION CountDITL(theDialog: DialogPtr): INTEGER;PROCEDURE ShortenDITL(theDialog: DialogPtr;numberItems: INTEGER);FUNCTION StdFilterProc(theDialog: DialogPtr;event: EventRecord;VAR itemHit: INTEGER): BOOLEAN;FUNCTION GetStdFilterProc(VAR theProc: ProcPtr ): OSErr;FUNCTION SetDialogDefaultItem(theDialog: DialogPtr; newItem: INTEGER): OSErr;FUNCTION SetDialogCancelItem(theDialog: DialogPtr; newItem: INTEGER): OSErr;FUNCTION SetDialogTracksCursor(theDialog: DialogPtr; tracks: Boolean):OSErr;IMPLEMENTATIONPROCEDURE InitDialogs(resumeProc: ResumeProcPtr); BEGIN END;PROCEDURE ErrorSound(soundProc: SoundProcPtr); BEGIN END;FUNCTION NewDialog(wStorage: Ptr;boundsRect: Rect;title: Str255;  visible: BOOLEAN; procID: INTEGER;behind: WindowPtr;goAwayFlag: BOOLEAN;refCon:  LONGINT; itmLstHndl: Handle): DialogPtr; BEGIN NewDialog := new(DialogPtr) END;FUNCTION GetNewDialog(dialogID: INTEGER;dStorage: Ptr;behind: WindowPtr): DialogPtr; BEGIN GetNewDialog := new(DialogPtr) END;PROCEDURE CloseDialog(theDialog: DialogPtr); BEGIN END;PROCEDURE DisposDialog(theDialog: DialogPtr); BEGIN END;PROCEDURE DisposeDialog(theDialog: DialogPtr); BEGIN END;PROCEDURE ParamText(param0: Str255;param1: Str255;param2: Str255;param3: Str255); BEGIN END;PROCEDURE ModalDialog(filterProc: ModalFilterProcPtr;VAR itemHit: INTEGER); BEGIN END;FUNCTION IsDialogEvent(theEvent: EventRecord): BOOLEAN; BEGIN IsDialogEvent := false END;FUNCTION DialogSelect(theEvent: EventRecord;VAR theDialog: DialogPtr;VAR itemHit: INTEGER): BOOLEAN; BEGIN DialogSelect := false END;PROCEDURE DrawDialog(theDialog: DialogPtr); BEGIN END;PROCEDURE UpdateDialog(theDialog: DialogPtr;updateRgn: RgnHandle); BEGIN END;PROCEDURE UpdtDialog(theDialog: DialogPtr;updateRgn: RgnHandle); BEGIN END;FUNCTION Alert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER; BEGIN Alert := 0 END;FUNCTION StopAlert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER; BEGIN StopAlert := 0 END;FUNCTION NoteAlert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER; BEGIN NoteAlert := 0 END;FUNCTION CautionAlert(alertID: INTEGER;filterProc: ModalFilterProcPtr): INTEGER; BEGIN CautionAlert := 0 END;PROCEDURE GetDialogItem(theDialog: DialogPtr;itemNo: INTEGER;VAR itemType: INTEGER; VAR item: Handle;VAR box: Rect); BEGIN END;PROCEDURE GetDItem(theDialog: DialogPtr;itemNo: INTEGER;VAR itemType: INTEGER; VAR item: Handle;VAR box: Rect); BEGIN END;PROCEDURE SetDialogItem(theDialog: DialogPtr;itemNo: INTEGER;itemType: INTEGER; item: Handle;box: Rect); BEGIN END;PROCEDURE SetDItem(theDialog: DialogPtr;itemNo: INTEGER;itemType: INTEGER; item: Handle;box: Rect); BEGIN END;PROCEDURE HideDialogItem(theDialog: DialogPtr;itemNo: INTEGER); BEGIN END;PROCEDURE HideDItem(theDialog: DialogPtr;itemNo: INTEGER); BEGIN END;PROCEDURE ShowDialogItem(theDialog: DialogPtr;itemNo: INTEGER); BEGIN END;PROCEDURE ShowDItem(theDialog: DialogPtr;itemNo: INTEGER); BEGIN END;PROCEDURE SelectDialogItemText(theDialog: DialogPtr;itemNo: INTEGER;strtSel: INTEGER; endSel: INTEGER); BEGIN END;PROCEDURE SelIText(theDialog: DialogPtr;itemNo: INTEGER;strtSel: INTEGER; endSel: INTEGER); BEGIN END;PROCEDURE GetDialogItemText(item: Handle;VAR text: Str255); BEGIN END;PROCEDURE GetIText(item: Handle;VAR text: Str255); BEGIN END;PROCEDURE SetDialogItemText(item: Handle;text: Str255); BEGIN END;PROCEDURE SetIText(item: Handle;text: Str255); BEGIN END;FUNCTION FindDialogItem(theDialog: DialogPtr;thePt: Point): INTEGER; BEGIN FindDialogItem := 0 END;FUNCTION FindDItem(theDialog: DialogPtr;thePt: Point): INTEGER; BEGIN FindDItem := 0 END;FUNCTION NewColorDialog(dStorage: Ptr;boundsRect: Rect;title: Str255;visible: BOOLEAN; procID: INTEGER;  behind: WindowPtr;goAwayFlag: BOOLEAN;refCon: LONGINT; items: Handle): DialogPtr; BEGIN NewColorDialog := new(DialogPtr) END;FUNCTION NewCDialog(dStorage: Ptr;boundsRect: Rect;title: Str255;visible: BOOLEAN; procID: INTEGER;behind: WindowPtr;  goAwayFlag: BOOLEAN;refCon: LONGINT; items: Handle): DialogPtr; BEGIN NewCDialog := new(DialogPtr) END;FUNCTION GetAlertStage: INTEGER; BEGIN GetAlertStage := 0 END;FUNCTION GetAlrtStage: INTEGER; BEGIN GetAlrtStage := 0 END;PROCEDURE ResetAlertStage; BEGIN END;PROCEDURE ResetAlrtStage; BEGIN END;PROCEDURE DialogCut(theDialog: DialogPtr); BEGIN END;PROCEDURE DlgCut(theDialog: DialogPtr); BEGIN END;PROCEDURE DialogPaste(theDialog: DialogPtr); BEGIN END;PROCEDURE DlgPaste(theDialog: DialogPtr); BEGIN END;PROCEDURE DialogCopy(theDialog: DialogPtr); BEGIN END;PROCEDURE DlgCopy(theDialog: DialogPtr); BEGIN END;PROCEDURE DialogDelete(theDialog: DialogPtr); BEGIN END;PROCEDURE DlgDelete(theDialog: DialogPtr); BEGIN END;PROCEDURE SetDialogFont(fontNum: INTEGER); BEGIN END;PROCEDURE SetDAFont(fontNum: INTEGER); BEGIN END;PROCEDURE AppendDITL(theDialog: DialogPtr;theHandle: Handle;method: DITLMethod); BEGIN END;FUNCTION CountDITL(theDialog: DialogPtr): INTEGER; BEGIN CountDITL := 0 END;PROCEDURE ShortenDITL(theDialog: DialogPtr;numberItems: INTEGER); BEGIN END;FUNCTION StdFilterProc(theDialog: DialogPtr;event: EventRecord;VAR itemHit: INTEGER): BOOLEAN; BEGIN StdFilterProc := false END;FUNCTION GetStdFilterProc(VAR theProc: ProcPtr ): OSErr; BEGIN GetStdFilterProc := noErr END;FUNCTION SetDialogDefaultItem(theDialog: DialogPtr; newItem: INTEGER): OSErr; BEGIN SetDialogDefaultItem := noErr END;FUNCTION SetDialogCancelItem(theDialog: DialogPtr; newItem: INTEGER): OSErr; BEGIN SetDialogCancelItem :=  noErr END;FUNCTION SetDialogTracksCursor(theDialog: DialogPtr; tracks: Boolean):OSErr; BEGIN SetDialogTracksCursor := noErr END;END.