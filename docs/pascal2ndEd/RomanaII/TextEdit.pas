{Created: Sunday, July 28, 1991 at 12:09 AM TextEdit.p Pascal Interface to the Macintosh Libraries  Copyright Apple Computer, Inc. 1985-1992  All rights reserved	Change History (most recent first):		<20>	  8/4/92	DCL		Changing a few comments for New Inside Mac: doToggle,									teFInlineInput & teFUseTextServices		<19>	 7/15/92	SMB		## <ys>: Move DoText selectors from TextEditPriv.a to here so									the whole darn world can use them instead of hard-coded									constants!		<18>	 6/26/92	DCL		Miner Formatting Changes. Digging deep for things to do. Getting									the file ready for ETO 8.		<17>	  5/6/92	DCL		NIIM: Added synonyms for TESetJust (TESetAlignment),									GetStyleScrap (TEGetStyleScrapHandle), SetClikLoop									(TESetClickLoop), SetWordBreak (TESetWordBreak).		<16>	 4/15/92	DCL		Changed TESetStyleScrap to TEUseStyleScrap		<15>	 4/14/92	DCL		Added new improved names in the continued pursuit of									name-nirvana in IM 2nd Edition.		<14>	  4/6/92	DCL		For New Inside Mac: Adding fancy new improved names for old									crusty routines. #1025005   Replaced recalBack & recalLines with									hDispatchRec in TERec.		<13>	 2/17/92	MH		Added better spelling SetStyleScrap.		<12>	 9/12/91	MH		Add correctly spelled versions of 6 ..Style... Calls									(...Style... vs. Styl...)		<11>	 7/31/91	JL		Updated Copyright.		<10>	 1/27/91	LN		Checked in Database generate file from DSG.		 <9>	10/30/90	SMB		Added intTextWidthHook as a new selector to the TECustomHook and									TextWidthHook as an offset into the dispatch table. Added new									feature bit, teFUseTextServices, to allow an application to									disable inline input.		 <8>	 6/11/90	SMB		NEEDED FOR SIXPACK & 7.0: added TEFeatureFlag bit definition for									inline input features, teFInlineInput.		 <7>	 2/13/90	SMB		NEEDED for 6.0.5 - Added nWIDTHHook and intNWidthHook for									TextEdit's new C2P routine. Removed newTEFlags AGAIN!		 <4>	 1/30/90	SMB		NEEDED for 6.0.5 - Adding names for FindWord callers.		 <3>	 1/17/90	SMB		Cleaned up comment header.		 <2>	 1/17/90	SMB		NEEDED FOR 6.0.5: Moved newTEFlags into TextEditPriv.p. Added									new names for TESetJust's just parameter.		 <1>	12/18/90	CCH		Adding for the first time into BBS.} UNIT TextEdit; INTERFACE USES Types, Quickdraw;CONST{ Justification (word alignment) styles }teJustLeft = 0;teJustCenter = 1;teJustRight = -1;teForceLeft = -2;{ new names for the Justification (word alignment) styles }teFlushDefault = 0;						{flush according to the line direction }teCenter = 1;							{center justify (word alignment) }teFlushRight = -1;						{flush right for all scripts }teFlushLeft = -2;						{flush left for all scripts }{ Set/Replace style modes }fontBit = 0;							{set font}faceBit = 1;							{set face}sizeBit = 2;							{set size}clrBit = 3;								{set color}addSizeBit = 4;							{add size mode}toggleBit = 5;							{set faces in toggle mode}toglBit = 5;							{ obsolete.  use toggleBit }{ TESetStyle/TEContinuousStyle modes }doFont = 1;								{ set font (family) number}doFace = 2;								{set character style}doSize = 4;								{set type size}doColor = 8;							{set color}doAll = 15;								{set all attributes}addSize = 16;							{adjust type size}doToggle = 32;							{toggle mode for TESetStyle}{ offsets into TEDispatchRec }EOLHook = 0;							{[ProcPtr] TEEOLHook}DRAWHook = 4;							{[ProcPtr] TEWidthHook}WIDTHHook = 8;							{[ProcPtr] TEDrawHook}HITTESTHook = 12;						{[ProcPtr] TEHitTestHook}nWIDTHHook = 24;						{[ProcPtr] nTEWidthHook}TextWidthHook = 28;						{[ProcPtr] TETextWidthHook}{ selectors for TECustomHook }intEOLHook = 0;							{TEIntHook value}intDrawHook = 1;						{TEIntHook value}intWidthHook = 2;						{TEIntHook value}intHitTestHook = 3;						{TEIntHook value}intNWidthHook = 6;						{TEIntHook value for new version of WidthHook}intTextWidthHook = 7;					{TEIntHook value for new TextWidthHook}{ feature or bit definitions for TEFeatureFlag }teFAutoScroll = 0;						{00000001b}teFAutoScr = 0;							{00000001b  obsolete. use teFAutoScroll}teFTextBuffering = 1;					{00000010b}teFOutlineHilite = 2;					{00000100b}teFInlineInput = 3;						{00001000b }teFUseTextServices = 4;					{00010000b }{ action for the new "bit (un)set" interface, TEFeatureFlag }teBitClear = 0;teBitSet = 1;							{set the selector bit}teBitTest = -1;							{no change; just return the current setting}{constants for identifying the routine that called FindWord }teWordSelect = 4;						{clickExpand to select word}teWordDrag = 8;							{clickExpand to drag new word}teFromFind = 12;						{FindLine called it ($0C)}teFromRecal = 16;						{RecalLines called it ($10)      obsolete}{constants for identifying DoText selectors }teFind	= 0;											{DoText called for searching}teHighlight	= 1;										{DoText called for highlighting}teDraw	= -1;											{DoText called for drawing text}teCaret	= -2;											{DoText called for drawing the caret}TYPETEPtr = ^TERec;TEHandle = ^TEPtr;TERec = RECORD destRect: Rect; viewRect: Rect; selRect: Rect; lineHeight: INTEGER; fontAscent: INTEGER; selPoint: Point; selStart: INTEGER; selEnd: INTEGER; active: INTEGER; wordBreak: ProcPtr; clikLoop: ProcPtr; clickTime: LONGINT; clickLoc: INTEGER; caretTime: LONGINT; caretState: INTEGER; just: INTEGER; teLength: INTEGER; hText: Handle;{ recalBack: INTEGER;		}{ recalLines: INTEGER;		} hDispatchRec: LONGINT;			{ added to replace recalBack & recalLines.  it's a handle anyway } clikStuff: INTEGER; crOnly: INTEGER; txFont: INTEGER; txFace: Style;							{txFace is unpacked byte} txMode: INTEGER; txSize: INTEGER; inPort: GrafPtr; highHook: ProcPtr; caretHook: ProcPtr; nLines: INTEGER; lineStarts: ARRAY [0..16000] OF INTEGER; END;CharsPtr = ^Chars;CharsHandle = ^CharsPtr;Chars = PACKED ARRAY [0..32000] OF CHAR;StyleRun = RECORD startChar: INTEGER;					{starting character position} styleIndex: INTEGER;					{index in style table} END;STElement = RECORD stCount: INTEGER;						{number of runs in this style} stHeight: INTEGER;						{line height} stAscent: INTEGER;						{font ascent} stFont: INTEGER;						{font (family) number} stFace: Style;							{character Style} stSize: INTEGER;						{size in points} stColor: RGBColor;						{absolute (RGB) color} END;STPtr = ^TEStyleTable;STHandle = ^STPtr;TEStyleTable = ARRAY [0..1776] OF STElement;LHElement = RECORD lhHeight: INTEGER;						{maximum height in line} lhAscent: INTEGER;						{maximum ascent in line} END;LHPtr = ^LHTable;LHHandle = ^LHPtr;LHTable = ARRAY [0..8000] OF LHElement;ScrpSTElement = RECORD scrpStartChar: LONGINT;				{starting character position} scrpHeight: INTEGER;					{starting character position} scrpAscent: INTEGER; scrpFont: INTEGER; scrpFace: Style;						{unpacked byte} scrpSize: INTEGER; scrpColor: RGBColor; END;ScrpSTTable = ARRAY [0..1600] OF ScrpSTElement;StScrpPtr = ^StScrpRec;StScrpHandle = ^StScrpPtr;StScrpRec = RECORD scrpNStyles: INTEGER;					{number of styles in scrap} scrpStyleTab: ScrpSTTable;				{table of styles for scrap} END;NullStPtr = ^NullStRec;NullStHandle = ^NullStPtr;NullStRec = RECORD teReserved: LONGINT;					{reserved for future expansion} nullScrap: StScrpHandle;				{handle to scrap style table} END;TEStylePtr = ^TEStyleRec;TEStyleHandle = ^TEStylePtr;TEStyleRec = RECORD nRuns: INTEGER;						{number of style runs} nStyles: INTEGER;						{size of style table} styleTab: STHandle;					{handle to style table} lhTab: LHHandle;						{handle to line-height table} teRefCon: LONGINT;						{reserved for application use} nullStyle: NullStHandle;				{Handle to style set at null selection} runs: ARRAY [0..8000] OF StyleRun;		{ARRAY [0..8000] OF StyleRun} END;TextStylePtr = ^TextStyle;TextStyleHandle = ^TextStylePtr;TextStyle = RECORD tsFont: INTEGER;						{font (family) number} tsFace: Style;							{character Style} tsSize: INTEGER;						{size in point} tsColor: RGBColor;						{absolute (RGB) color} END;TEIntHook = INTEGER;PROCEDURE TEInit;FUNCTION TENew(destRect: Rect;viewRect: Rect): TEHandle;PROCEDURE TEDispose(hTE: TEHandle);PROCEDURE TESetText(text: Ptr;length: LONGINT;hTE: TEHandle);FUNCTION TEGetText(hTE: TEHandle): CharsHandle;PROCEDURE TEIdle(hTE: TEHandle);PROCEDURE TESetSelect(selStart: LONGINT;selEnd: LONGINT;hTE: TEHandle);PROCEDURE TEActivate(hTE: TEHandle);PROCEDURE TEDeactivate(hTE: TEHandle);PROCEDURE TEKey(key: CHAR;hTE: TEHandle);PROCEDURE TECut(hTE: TEHandle);PROCEDURE TECopy(hTE: TEHandle);PROCEDURE TEPaste(hTE: TEHandle);PROCEDURE TEDelete(hTE: TEHandle);PROCEDURE TEInsert(text: Ptr;length: LONGINT;hTE: TEHandle);PROCEDURE TESetAlignment(just: INTEGER;hTE: TEHandle);PROCEDURE TESetJust(just: INTEGER;hTE: TEHandle);PROCEDURE TEUpdate(rUpdate: Rect;hTE: TEHandle);PROCEDURE TETextBox(text: Ptr;length: LONGINT;box: Rect;just: INTEGER);PROCEDURE TextBox(text: Ptr;length: LONGINT;box: Rect;just: INTEGER);PROCEDURE TEScroll(dh: INTEGER;dv: INTEGER;hTE: TEHandle);PROCEDURE TESelView(hTE: TEHandle);PROCEDURE TEPinScroll(dh: INTEGER;dv: INTEGER;hTE: TEHandle);PROCEDURE TEAutoView(fAuto: BOOLEAN;hTE: TEHandle);FUNCTION TEScrapHandle: Handle;PROCEDURE TECalText(hTE: TEHandle);FUNCTION TEGetOffset(pt: Point;hTE: TEHandle): INTEGER;FUNCTION TEGetPoint(offset: INTEGER;hTE: TEHandle): Point;PROCEDURE TEClick(pt: Point;fExtend: BOOLEAN;h: TEHandle);FUNCTION TEStylNew(destRect: Rect;viewRect: Rect): TEHandle;FUNCTION TEStyleNew(destRect: Rect;viewRect: Rect): TEHandle;PROCEDURE SetStylHandle(theHandle: TEStyleHandle;hTE: TEHandle);PROCEDURE SetStyleHandle(theHandle: TEStyleHandle;hTE: TEHandle);PROCEDURE TESetStyleHandle(theHandle: TEStyleHandle;hTE: TEHandle);FUNCTION GetStylHandle(hTE: TEHandle): TEStyleHandle;FUNCTION GetStyleHandle(hTE: TEHandle): TEStyleHandle;FUNCTION TEGetStyleHandle(hTE: TEHandle): TEStyleHandle;PROCEDURE TEGetStyle(offset: INTEGER;VAR theStyle: TextStyle;VAR lineHeight: INTEGER; VAR fontAscent: INTEGER;hTE: TEHandle);PROCEDURE TEStylPaste(hTE: TEHandle);PROCEDURE TEStylePaste(hTE: TEHandle);PROCEDURE TESetStyle(mode: INTEGER;newStyle: TextStyle;fRedraw: BOOLEAN; hTE: TEHandle);PROCEDURE TEReplaceStyle(mode: INTEGER;oldStyle: TextStyle;newStyle: TextStyle; fRedraw: BOOLEAN;hTE: TEHandle);FUNCTION TEGetStyleScrapHandle(hTE: TEHandle): StScrpHandle;FUNCTION GetStylScrap(hTE: TEHandle): StScrpHandle;FUNCTION GetStyleScrap(hTE: TEHandle): StScrpHandle;PROCEDURE TEStylInsert(text: Ptr;length: LONGINT;hST: StScrpHandle;hTE: TEHandle);PROCEDURE TEStyleInsert(text: Ptr;length: LONGINT;hST: StScrpHandle;hTE: TEHandle);FUNCTION TEGetHeight(endLine: LONGINT;startLine: LONGINT;hTE: TEHandle): LONGINT;FUNCTION TEContinuousStyle(VAR mode: INTEGER;VAR aStyle: TextStyle;hTE: TEHandle): BOOLEAN;PROCEDURE SetStylScrap(rangeStart: LONGINT;rangeEnd: LONGINT;newStyles: StScrpHandle; redraw: BOOLEAN;hTE: TEHandle);PROCEDURE SetStyleScrap(rangeStart: LONGINT;rangeEnd: LONGINT;newStyles: StScrpHandle; redraw: BOOLEAN;hTE: TEHandle);PROCEDURE TEUseStyleScrap(rangeStart: LONGINT;rangeEnd: LONGINT;newStyles: StScrpHandle; fRedraw: BOOLEAN;hTE: TEHandle);PROCEDURE TECustomHook(which: TEIntHook;VAR addr: ProcPtr;hTE: TEHandle);FUNCTION TENumStyles(rangeStart: LONGINT;rangeEnd: LONGINT;hTE: TEHandle): LONGINT;FUNCTION TEFeatureFlag(feature: INTEGER;action: INTEGER;hTE: TEHandle): INTEGER;FUNCTION TEGetScrapLength: LONGINT;FUNCTION TEGetScrapLen: LONGINT;PROCEDURE TESetScrapLength(length: LONGINT);PROCEDURE TESetScrapLen(length: LONGINT);FUNCTION TEFromScrap: OSErr;FUNCTION TEToScrap: OSErr;PROCEDURE TESetClickLoop(clikProc: ProcPtr;hTE: TEHandle);PROCEDURE SetClikLoop(clikProc: ProcPtr;hTE: TEHandle);PROCEDURE TESetWordBreak(wBrkProc: ProcPtr;hTE: TEHandle);PROCEDURE SetWordBreak(wBrkProc: ProcPtr;hTE: TEHandle);IMPLEMENTATIONPROCEDURE TEInit; BEGIN END;FUNCTION TENew(destRect: Rect;viewRect: Rect): TEHandle; BEGIN TENew :=  new(TEHandle) END;PROCEDURE TEDispose(hTE: TEHandle); BEGIN END;PROCEDURE TESetText(text: Ptr;length: LONGINT;hTE: TEHandle); BEGIN END;FUNCTION TEGetText(hTE: TEHandle): CharsHandle; BEGIN TEGetText := new(CharsHandle) END;PROCEDURE TEIdle(hTE: TEHandle); BEGIN END;PROCEDURE TESetSelect(selStart: LONGINT;selEnd: LONGINT;hTE: TEHandle); BEGIN END;PROCEDURE TEActivate(hTE: TEHandle); BEGIN END;PROCEDURE TEDeactivate(hTE: TEHandle); BEGIN END;PROCEDURE TEKey(key: CHAR;hTE: TEHandle); BEGIN END;PROCEDURE TECut(hTE: TEHandle); BEGIN END;PROCEDURE TECopy(hTE: TEHandle); BEGIN END;PROCEDURE TEPaste(hTE: TEHandle); BEGIN END;PROCEDURE TEDelete(hTE: TEHandle); BEGIN END;PROCEDURE TEInsert(text: Ptr;length: LONGINT;hTE: TEHandle); BEGIN END;PROCEDURE TESetAlignment(just: INTEGER;hTE: TEHandle); BEGIN END;PROCEDURE TESetJust(just: INTEGER;hTE: TEHandle); BEGIN END;PROCEDURE TEUpdate(rUpdate: Rect;hTE: TEHandle); BEGIN END;PROCEDURE TETextBox(text: Ptr;length: LONGINT;box: Rect;just: INTEGER); BEGIN END;PROCEDURE TextBox(text: Ptr;length: LONGINT;box: Rect;just: INTEGER); BEGIN END;PROCEDURE TEScroll(dh: INTEGER;dv: INTEGER;hTE: TEHandle); BEGIN END;PROCEDURE TESelView(hTE: TEHandle); BEGIN END;PROCEDURE TEPinScroll(dh: INTEGER;dv: INTEGER;hTE: TEHandle); BEGIN END;PROCEDURE TEAutoView(fAuto: BOOLEAN;hTE: TEHandle); BEGIN END;FUNCTION TEScrapHandle: Handle; BEGIN TEScrapHandle := new(Handle)  END;PROCEDURE TECalText(hTE: TEHandle); BEGIN END;FUNCTION TEGetOffset(pt: Point;hTE: TEHandle): INTEGER; BEGIN TEGetOffset := 0 END;FUNCTION TEGetPoint(offset: INTEGER;hTE: TEHandle): Point;var p: Point;BEGIN  p.h := 0;  p.v := 0;  TEGetPoint := pEND;PROCEDURE TEClick(pt: Point;fExtend: BOOLEAN;h: TEHandle); BEGIN END;FUNCTION TEStylNew(destRect: Rect;viewRect: Rect): TEHandle; BEGIN TEStylNew :=  new(TEHandle) END;FUNCTION TEStyleNew(destRect: Rect;viewRect: Rect): TEHandle; BEGIN TEStyleNew :=  new(TEHandle) END;PROCEDURE SetStylHandle(theHandle: TEStyleHandle;hTE: TEHandle); BEGIN END;PROCEDURE SetStyleHandle(theHandle: TEStyleHandle;hTE: TEHandle); BEGIN END;PROCEDURE TESetStyleHandle(theHandle: TEStyleHandle;hTE: TEHandle); BEGIN  END;FUNCTION GetStylHandle(hTE: TEHandle): TEStyleHandle; BEGIN GetStylHandle :=  new(TEStyleHandle) END;FUNCTION GetStyleHandle(hTE: TEHandle): TEStyleHandle; BEGIN GetStyleHandle :=  new(TEStyleHandle) END;FUNCTION TEGetStyleHandle(hTE: TEHandle): TEStyleHandle; BEGIN TEGetStyleHandle :=  new(TEStyleHandle) END;PROCEDURE TEGetStyle(offset: INTEGER;VAR theStyle: TextStyle;VAR lineHeight: INTEGER; VAR fontAscent: INTEGER;hTE: TEHandle); BEGIN END;PROCEDURE TEStylPaste(hTE: TEHandle); BEGIN END;PROCEDURE TEStylePaste(hTE: TEHandle); BEGIN END;PROCEDURE TESetStyle(mode: INTEGER;newStyle: TextStyle;fRedraw: BOOLEAN; hTE: TEHandle); BEGIN END;PROCEDURE TEReplaceStyle(mode: INTEGER;oldStyle: TextStyle;newStyle: TextStyle; fRedraw: BOOLEAN;hTE: TEHandle); BEGIN END;FUNCTION TEGetStyleScrapHandle(hTE: TEHandle): StScrpHandle; BEGIN TEGetStyleScrapHandle := new(StScrpHandle)  END;FUNCTION GetStylScrap(hTE: TEHandle): StScrpHandle; BEGIN GetStylScrap := new(StScrpHandle) END;FUNCTION GetStyleScrap(hTE: TEHandle): StScrpHandle; BEGIN GetStyleScrap := new(StScrpHandle) END;PROCEDURE TEStylInsert(text: Ptr;length: LONGINT;hST: StScrpHandle;hTE: TEHandle); BEGIN END;PROCEDURE TEStyleInsert(text: Ptr;length: LONGINT;hST: StScrpHandle;hTE: TEHandle); BEGIN END;FUNCTION TEGetHeight(endLine: LONGINT;startLine: LONGINT;hTE: TEHandle): LONGINT; BEGIN TEGetHeight := 0 END;FUNCTION TEContinuousStyle(VAR mode: INTEGER;VAR aStyle: TextStyle;hTE: TEHandle): BOOLEAN; BEGIN TEContinuousStyle := false END;PROCEDURE SetStylScrap(rangeStart: LONGINT;rangeEnd: LONGINT;newStyles: StScrpHandle; redraw: BOOLEAN; hTE: TEHandle); BEGIN END;PROCEDURE SetStyleScrap(rangeStart: LONGINT;rangeEnd: LONGINT;newStyles: StScrpHandle; redraw: BOOLEAN;hTE: TEHandle); BEGIN END;PROCEDURE TEUseStyleScrap(rangeStart: LONGINT;rangeEnd: LONGINT;newStyles: StScrpHandle; fRedraw: BOOLEAN;hTE: TEHandle); BEGIN END;PROCEDURE TECustomHook(which: TEIntHook;VAR addr: ProcPtr;hTE: TEHandle); BEGIN END;FUNCTION TENumStyles(rangeStart: LONGINT;rangeEnd: LONGINT;hTE: TEHandle): LONGINT; BEGIN TENumStyles := 0 END;FUNCTION TEFeatureFlag(feature: INTEGER;action: INTEGER;hTE: TEHandle): INTEGER; BEGIN TEFeatureFlag := 0 END;FUNCTION TEGetScrapLength: LONGINT; BEGIN TEGetScrapLength := 0 END;FUNCTION TEGetScrapLen: LONGINT; BEGIN TEGetScrapLen := 0 END;PROCEDURE TESetScrapLength(length: LONGINT); BEGIN END;PROCEDURE TESetScrapLen(length: LONGINT); BEGIN END;FUNCTION TEFromScrap: OSErr; BEGIN TEFromScrap := noErr END;FUNCTION TEToScrap: OSErr; BEGIN TEToScrap := noErr END;PROCEDURE TESetClickLoop(clikProc: ProcPtr;hTE: TEHandle); BEGIN END;PROCEDURE SetClikLoop(clikProc: ProcPtr;hTE: TEHandle); BEGIN END;PROCEDURE TESetWordBreak(wBrkProc: ProcPtr;hTE: TEHandle); BEGIN END;PROCEDURE SetWordBreak(wBrkProc: ProcPtr;hTE: TEHandle); BEGIN END; END.