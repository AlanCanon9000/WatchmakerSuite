{Created: Wednesday, July 31, 1991 at 7:56 AM Resources.p Pascal Interface to the Macintosh Libraries  Copyright Apple Computer, Inc. 1985-1991  All rights reserved	Change History (most recent first):		 <9>	 6/26/92	DCL		Miner Formatting Changes. Digging deep for things to do.		 <8>	 4/21/92	DTY		#1018901,<gbm>: Add interface for GetNextFOND.		 <7>	 7/31/91	JL		Updated Copyright.		 <6>	 7/26/91	stb		use inlines for HOpenResFile and HCreateResFile when									SystemSevenOrLater		 <5>	 1/27/91	LN		Checked in Database generate file from DSG.		 <4>	 12/7/90	dba		<gbm> Add partial resource calls.} UNIT Resources; INTERFACE USES Types, Files;CONSTresSysHeap = 64;	{System or application heap?}resPurgeable = 32;	{Purgeable resource?}resLocked = 16;		{Load it in locked?}resProtected = 8;	{Protected?}resPreload = 4;		{Load in on OpenResFile?}resChanged = 2;		{Resource changed?}mapReadOnly = 128;	{Resource file read-only}mapCompact = 64;	{Compact resource file}mapChanged = 32;	{Write map out at updat}{ Values for setting RomMapInsert and TmpResLoad }mapTrue = $FFFF;	{insert ROM map w/ TmpResLoad = TRUE.}mapFalse = $FF00;	{insert ROM map w/ TmpResLoad = FALSE.}FUNCTION InitResources: INTEGER;PROCEDURE RsrcZoneInit;PROCEDURE CloseResFile(refNum: INTEGER);FUNCTION ResError: INTEGER;FUNCTION CurResFile: INTEGER;FUNCTION HomeResFile(theResource: Handle): INTEGER;PROCEDURE CreateResFile(fileName: Str255);FUNCTION OpenResFile(fileName: Str255): INTEGER;PROCEDURE UseResFile(refNum: INTEGER);FUNCTION CountTypes: INTEGER;FUNCTION Count1Types: INTEGER;PROCEDURE GetIndType(VAR theType: ResType;index: INTEGER);PROCEDURE Get1IndType(VAR theType: ResType;index: INTEGER);PROCEDURE SetResLoad(load: BOOLEAN);FUNCTION CountResources(theType: ResType): INTEGER;FUNCTION Count1Resources(theType: ResType): INTEGER;FUNCTION GetIndResource(theType: ResType;index: INTEGER): Handle;FUNCTION Get1IndResource(theType: ResType;index: INTEGER): Handle;FUNCTION GetResource(theType: ResType;theID: INTEGER): Handle;FUNCTION Get1Resource(theType: ResType;theID: INTEGER): Handle;FUNCTION GetNamedResource(theType: ResType;name: Str255): Handle;FUNCTION Get1NamedResource(theType: ResType;name: Str255): Handle;PROCEDURE LoadResource(theResource: Handle);PROCEDURE ReleaseResource(theResource: Handle);PROCEDURE DetachResource(theResource: Handle);FUNCTION UniqueID(theType: ResType): INTEGER;FUNCTION Unique1ID(theType: ResType): INTEGER;FUNCTION GetResAttrs(theResource: Handle): INTEGER;PROCEDURE GetResInfo(theResource: Handle;VAR theID: INTEGER;VAR theType: ResType; VAR name: Str255);PROCEDURE SetResInfo(theResource: Handle;theID: INTEGER;name: Str255);PROCEDURE AddResource(theResource: Handle;theType: ResType;theID: INTEGER; name: Str255);FUNCTION SizeResource(theResource: Handle): LONGINT;FUNCTION MaxSizeRsrc(theResource: Handle): LONGINT;FUNCTION RsrcMapEntry(theResource: Handle): LONGINT;PROCEDURE SetResAttrs(theResource: Handle;attrs: INTEGER);PROCEDURE ChangedResource(theResource: Handle);PROCEDURE RmveResource(theResource: Handle);PROCEDURE UpdateResFile(refNum: INTEGER);PROCEDURE WriteResource(theResource: Handle);PROCEDURE SetResPurge(install: BOOLEAN);FUNCTION GetResFileAttrs(refNum: INTEGER): INTEGER;PROCEDURE SetResFileAttrs(refNum: INTEGER;attrs: INTEGER);FUNCTION OpenRFPerm(fileName: Str255;vRefNum: INTEGER;permission: SignedByte): INTEGER;FUNCTION RGetResource(theType: ResType;theID: INTEGER): Handle;FUNCTION HOpenResFile(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255; permission: SignedByte): INTEGER;PROCEDURE HCreateResFile(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255);FUNCTION FSpOpenResFile(spec: FSSpec;permission: SignedByte): INTEGER;PROCEDURE FSpCreateResFile(spec: FSSpec;creator: OSType;fileType: OSType; scriptTag: ScriptCode);PROCEDURE ReadPartialResource(theResource: Handle;offset: LONGINT;buffer: UNIV Ptr; count: LONGINT);PROCEDURE WritePartialResource(theResource: Handle;offset: LONGINT;buffer: UNIV Ptr; count: LONGINT);PROCEDURE SetResourceSize(theResource: Handle;newSize: LONGINT);FUNCTION GetNextFOND(fondHandle: Handle): Handle;IMPLEMENTATIONFUNCTION InitResources: INTEGER;BEGIN InitResources := 0; END;PROCEDURE RsrcZoneInit; BEGIN END;PROCEDURE CloseResFile(refNum: INTEGER); BEGIN END;FUNCTION ResError: INTEGER; BEGIN ResError := 0; END;FUNCTION CurResFile: INTEGER; BEGIN CurResFile := 0; END;FUNCTION HomeResFile(theResource: Handle): INTEGER; BEGIN HomeResFile := 0; END;PROCEDURE CreateResFile(fileName: Str255); BEGIN END;FUNCTION OpenResFile(fileName: Str255): INTEGER; BEGIN OpenResFile := 0; END;PROCEDURE UseResFile(refNum: INTEGER); BEGIN END;FUNCTION CountTypes: INTEGER; BEGIN CountTypes := 0; END;FUNCTION Count1Types: INTEGER; BEGIN Count1Types := 0; END;PROCEDURE GetIndType(VAR theType: ResType;index: INTEGER); BEGIN END;PROCEDURE Get1IndType(VAR theType: ResType;index: INTEGER); BEGIN END;PROCEDURE SetResLoad(load: BOOLEAN); BEGIN END;FUNCTION CountResources(theType: ResType): INTEGER; BEGIN CountResources := 0; END;FUNCTION Count1Resources(theType: ResType): INTEGER; BEGIN Count1Resources := 0; END;FUNCTION GetIndResource(theType: ResType;index: INTEGER): Handle; BEGIN GetIndResource := new(Handle); END;FUNCTION Get1IndResource(theType: ResType;index: INTEGER): Handle; BEGIN Get1IndResource := new(Handle); END;FUNCTION GetResource(theType: ResType;theID: INTEGER): Handle; BEGIN GetResource := new(Handle); END;FUNCTION Get1Resource(theType: ResType;theID: INTEGER): Handle; BEGIN Get1Resource := new(Handle); END;FUNCTION GetNamedResource(theType: ResType;name: Str255): Handle; BEGIN GetNamedResource := new(Handle); END;FUNCTION Get1NamedResource(theType: ResType;name: Str255): Handle; BEGIN Get1NamedResource := new(Handle); END;PROCEDURE LoadResource(theResource: Handle); BEGIN END;PROCEDURE ReleaseResource(theResource: Handle); BEGIN END;PROCEDURE DetachResource(theResource: Handle); BEGIN END;FUNCTION UniqueID(theType: ResType): INTEGER; BEGIN UniqueID := 0; END;FUNCTION Unique1ID(theType: ResType): INTEGER; BEGIN Unique1ID := 0; END;FUNCTION GetResAttrs(theResource: Handle): INTEGER; BEGIN GetResAttrs := 0; END;PROCEDURE GetResInfo(theResource: Handle;VAR theID: INTEGER;VAR theType: ResType; VAR name: Str255); BEGIN END;PROCEDURE SetResInfo(theResource: Handle;theID: INTEGER;name: Str255); BEGIN END;PROCEDURE AddResource(theResource: Handle;theType: ResType;theID: INTEGER; name: Str255); BEGIN END;FUNCTION SizeResource(theResource: Handle): LONGINT; BEGIN SizeResource := 0; END;FUNCTION MaxSizeRsrc(theResource: Handle): LONGINT; BEGIN MaxSizeRsrc := 0; END;FUNCTION RsrcMapEntry(theResource: Handle): LONGINT; BEGIN RsrcMapEntry := 0; END;PROCEDURE SetResAttrs(theResource: Handle;attrs: INTEGER); BEGIN END;PROCEDURE ChangedResource(theResource: Handle); BEGIN END;PROCEDURE RmveResource(theResource: Handle); BEGIN END;PROCEDURE UpdateResFile(refNum: INTEGER); BEGIN END;PROCEDURE WriteResource(theResource: Handle); BEGIN END;PROCEDURE SetResPurge(install: BOOLEAN); BEGIN END;FUNCTION GetResFileAttrs(refNum: INTEGER): INTEGER; BEGIN GetResFileAttrs := 0; END;PROCEDURE SetResFileAttrs(refNum: INTEGER;attrs: INTEGER); BEGIN END;FUNCTION OpenRFPerm(fileName: Str255;vRefNum: INTEGER;permission: SignedByte): INTEGER; BEGIN OpenRFPerm := 0; END;FUNCTION RGetResource(theType: ResType;theID: INTEGER): Handle;BEGIN RGetResource := new(Handle); END;FUNCTION HOpenResFile(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255; permission: SignedByte): INTEGER; BEGIN HOpenResFile := 0; END;PROCEDURE HCreateResFile(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255); BEGIN END;FUNCTION FSpOpenResFile(spec: FSSpec;permission: SignedByte): INTEGER; BEGIN FSpOpenResFile := 0; END;PROCEDURE FSpCreateResFile(spec: FSSpec;creator: OSType;fileType: OSType; scriptTag: ScriptCode); BEGIN END;PROCEDURE ReadPartialResource(theResource: Handle;offset: LONGINT;buffer: UNIV Ptr; count: LONGINT); BEGIN END;PROCEDURE WritePartialResource(theResource: Handle;offset: LONGINT;buffer: UNIV Ptr; count: LONGINT); BEGIN END;PROCEDURE SetResourceSize(theResource: Handle;newSize: LONGINT); BEGIN END;FUNCTION GetNextFOND(fondHandle: Handle): Handle; BEGIN GetNextFOND := new(Handle); END; END.