unit unit_breeding_window;{File name: Breeding_Window.Pas}{Function: Handle a Window}{History: 12/15/90 Original by Prototyper.   }interface	uses{$IFC UNDEFINED THINK_Pascal}		Events, Quickdraw, {$ENDC}		unit_preferences, unit_evolve;{Initialize us so all our routines can be activated}	procedure Init_Breeding_Window (prefs: ArthromorphPreferencesHandle);{Close our window}	procedure Close_Breeding_Window (prefs: ArthromorphPreferencesHandle);{Open our window and draw everything}	procedure Open_Breeding_Window (prefs: ArthromorphPreferencesHandle);{Update our window, someone uncovered a part of us}	procedure UpDate_Breeding_Window (prefs: ArthromorphPreferencesHandle);{Handle action to our window, like controls}	procedure Do_Breeding_Window (prefs: ArthromorphPreferencesHandle; myEvent: EventRecord);	procedure maximizeBreedingWindow (prefs: ArthromorphPreferencesHandle);implementation	uses{$IFC UNDEFINED THINK_Pascal}		Types, Windows, Controls, Memory, {$ENDC}		unit_update_animals, unit_dialog_helper, unit_watchdocrec,    unit_init_the_menus, unit_breed_docrec;{=================================}	function GetMaxWindowSize: Rect;		var			pRect: Rect;			screenPort: WindowPtr;	begin  { set up window stuff }		GetWMgrPort(ScreenPort);                { get grafport for all windows }		SetPort(ScreenPort);                      { and keep hand just in case }		pRect := ScreenBits.Bounds;		with PRect do			begin    {I determined these numbers by trial and error after failing to find}    {any official documentation on maximizing window size - ABC}				Left := Left + 0;				Top := Top + 0; {Height of the menu bar}				Right := Right - 10;				Bottom := Bottom - 47;			end;		GetMaxWindowSize := pRect;	end;{Initialize us so all our routines can be activated}	procedure Init_Breeding_Window (prefs: ArthromorphPreferencesHandle);	begin                   {Start of Window initialize routine}  {Make sure other routines know we are not valid yet}		prefs^^.BreedingWindow := nil;	end;                    {End of procedure}{=================================}{Close our window}	procedure Close_Breeding_Window (prefs: ArthromorphPreferencesHandle);	begin                   {Start of Window close routine}		with prefs^^ do			if (BreedingWindow <> nil) then{See if we should close this window}				begin					DisposeHandle(Handle(BreedingDocRecHandle(GetWRefCon(BreedingWindow))));					DisposeWindow(BreedingWindow);{Clear window and controls}					BreedingWindow := nil;        {Make sure other routines know we are open}				end;                {End for if (BreedingWindow<>nil)}	end;                    {End of procedure}{=================================}{We were resized or zoomed, update the scrolling scrollbars}{=================================}{Update our window, someone uncovered a part of us}{Called by handleUpDateEvt in response to an updateEvt}	procedure UpDate_Breeding_Window (prefs: ArthromorphPreferencesHandle);		var			SavePort: WindowPtr;{Place to save the last port}			rec: BreedingDocRecHandle;			finishedWIthAnimation: boolean;	begin               {Start of Window update routine}		with prefs^^ do			if (BreedingWindow <> nil) then{Handle an open when already opened}				begin					rec := BreedingDocRecHandle(GetWRefCon(BreedingWindow));					GetPort(SavePort);{Save the current port}					SetPort(prefs^^.BreedingWindow);{Set the port to my window}					if resizing or redraw then						begin							ClipRect(screenbits.bounds);							EraseRect(BreedingWindow^.portrect);						end;    {SelectWindow(prefs^^.BreedingWindow);}					DrawControls(BreedingWindow);{Draw all the controls}					DrawGrowIcon(BreedingWindow);{Draw the Grow box}					finishedWithAnimation := UpDateAnimals(prefs, rec);          if finishedWithAnimation then            EnableMyMenus          else   					InvalRect(BreedingWindow^.portRect);					SetPort(SavePort);{Restore the old port}				end;            {End for if (BreedingWindow<>nil)}	end;                {End of procedure}	procedure maximizeBreedingWindow (prefs: ArthromorphPreferencesHandle);		var			maxRect: Rect;	begin		maxRect := GetMaxWindowSize;		SizeWindow(prefs^^.BreedingWindow, maxRect.right - maxRect.left, maxRect.bottom - maxRect.top, True);	end;{Open our window and draw everything}	procedure Open_Breeding_Window (prefs: ArthromorphPreferencesHandle);		var			rec: BreedingDocRecHandle;	begin               {Start of Window open routine}		with prefs^^ do			begin				if (BreedingWindow = nil) then{Handle an open when already opened}					begin						BreedingWindow := GetNewWindow(2, nil, Pointer(-1));{Get the window from the resource file}						rec := BreedingDocRecHandle(NewHandle(SizeOf(BreedingDocRec)));						WatchDocRecHandle(rec)^^.resourceRefCon := GetWRefCon(BreedingWindow);						rec^^.eState := nil;						SetWRefCon(BreedingWindow, LONGINT(Ord(rec)));						SetPort(BreedingWindow);{Prepare to write into our window}						DrawControls(BreedingWindow);{Draw all the controls}						DrawGrowIcon(BreedingWindow);{Draw the Grow box}						ShowWindow(BreedingWindow);{Show the window now}						maximizeBreedingWindow(prefs);						SelectWindow(BreedingWindow);{Bring our window to the front}					end           {End for if (BreedingWindow<>nil)}				else					begin						SelectWindow(BreedingWindow);{Already open, so show it}						InvalidateWindow(BreedingWindow); {Trigger an update}					end;			end;	end;                {End of procedure}{=================================}{Called when an arthromorph is clicked: SHOWTIME! ABC}	procedure Do_Breeding_Window (prefs: ArthromorphPreferencesHandle; myEvent: EventRecord);		var			myPt: Point;       {Point where event happened}			rec: BreedingDocRecHandle;      savePort: GrafPtr;	begin               {Start of Window handler}		rec := BreedingDocRecHandle(GetWRefCon(prefs^^.BreedingWindow));    if rec^^.estate = nil then      begin		    myPt := myEvent.where;{Get mouse position}		    GlobalToLocal(myPt);        DisableMyMenus;		    rec^^.eState := evolve(myPt);        GetPort(savePOrt);        SetPort(prefs^^.BreedingWindow);        InvalRect(prefs^^.BreedingWindow^.portRect);        SetPort(savePort);      end;  end;                {End of procedure}{=================================}end.                {End of unit}