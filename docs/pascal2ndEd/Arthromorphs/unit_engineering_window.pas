unit unit_engineering_window;{File name:  Engineering_Window.Pas  }{Function: Handle a dialog}{History: 1/4/91 Original by Prototyper (Richard Dawkins)}{2015-11-05 Second Edition by Alan Canon}interface	uses    unit_muts;	procedure D_Engineering_Window(muts: ArthromorphMutationsHandle);implementationuses{$IFC UNDEFINED THINK_Pascal}    Dialogs, Windows, Memory, Types,{$ENDC}    unit_dialog_helper,    unit_engineering_private;	procedure D_Engineering_Window(muts: ArthromorphMutationsHandle);		var			GetSelection: DialogPtr;{Pointer to this dialog}      AgreeToExit: boolean;      handles: EngineeringWindowHandlesHandle;	begin {Start of dialog handler}    {Bring in the dialog resource}		GetSelection := GetNewDialog(4, nil, Pointer(-1));    handles := NewDialogItemHandles(GetSelection);		ShowWindow(GetSelection);{Open a dialog box}		SelectWindow(GetSelection);{Lets see it}    {Draw any Lists, popups, lines, or rectangles}    Refresh_Dialog(GetSelection);    SetTextEditAttributesForDialog (GetSelection);    AdjustCheckBoxes(muts, handles);    AgreeToExit := false;    repeat      {Get results after dialog}		  if HandleEngineeringWindowEvents(GetSelection, handles) then        if HandleOKButtonPressed(handles) then          begin            SetGlobalsFromDialogState(muts, handles);            AgreeToExit:= true          end        else          begin            Refresh_Dialog(GetSelection);            AgreeToExit := false          end      else			  AgreeToExit := true; {Cancel button pressed}    until AgreeToExit;    DisposeHandle(Handle(handles));		DisposeDialog(GetSelection);{Flush the dialog out of memory}	end;    							{End of procedure}end.    							{End of unit}