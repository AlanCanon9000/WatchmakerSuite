unit unit_genome_window;{File name: Genome_Window.Pas}{Function: Handle a Window}{History: 12/12/90 Original by Prototyper.   }interface	uses{$IFC UNDEFINED THINK_Pascal}		Events, Quickdraw,{$ENDC}		unit_preferences;{Initialize us so all our routines can be activated}	procedure Init_Genome_Window (prefs: ArthromorphPreferencesHandle);{Close our window}	procedure Close_Genome_Window (prefs: ArthromorphPreferencesHandle);{Open our window and draw everything}	procedure Open_Genome_Window (prefs: ArthromorphPreferencesHandle);{Update our window, someone uncovered a part of us}	procedure Update_Genome_Window (prefs: ArthromorphPreferencesHandle);{Handle action to our window, like controls}	procedure Do_Genome_Window (prefs: ArthromorphPreferencesHandle; myEvent: EventRecord);  procedure ActivateGenomeWindow(whichWindow: WindowPtr; myEvent: EventRecord);implementation	uses{$IFC UNDEFINED THINK_Pascal}		Types, Controls, Windows, TextEdit, QuickdrawText, Fonts, TextUtils,{$ENDC}		unit_watchdocrec, unit_tell_error;{=================================}{Initialize us so all our routines can be activated}	procedure Init_Genome_Window (prefs: ArthromorphPreferencesHandle);	begin                   {Start of Window initialize routine}		prefs^^.GenomeWindow := nil;  {Make sure other routines know we are not valid yet}	end;                    {End of procedure}{=================================}{Close our window}	procedure Close_Genome_Window (prefs: ArthromorphPreferencesHandle);	begin                   {Start of Window close routine}    with prefs^^ do		if (GenomeWindow <> nil) then{See if we should close this window}			begin        DisposeWatchDocRec(WatchDocRecHandle(GetWRefCon(GenomeWindow)));				DisposeWindow(GenomeWindow);{Clear window and controls}				GenomeWindow := nil;        {Make sure other routines know we are open}			end;                {End for if (GenomeWindow<>nil)}	end;                    {End of procedure}{=================================}{Update our window, someone uncovered a part of us}	procedure Update_Genome_Window (prefs: ArthromorphPreferencesHandle);		var			SavePort: WindowPtr;       {Place to save the last port}			rec: WatchDocRecHandle;			r: Rect;	begin                   {Start of Window update routine}		if (prefs^^.GenomeWindow <> nil) then{Handle an open when already opened}			begin				rec := WatchDocRecHandle(GetWRefCon(prefs^^.GenomeWindow));				GetPort(SavePort);      {Save the current port}				SetPort(prefs^^.GenomeWindow);      {Set the port to my window}    {TEUpdate(prefs^^.GenomeWindow^.portRect, rec^^.editRec);}				r := prefs^^.GenomeWindow^.portRect;				EraseRect(r);				r.right := r.right - 20;				r.bottom := r.bottom - 20;				TextFont(courier);     {Set the font to draw in}				with prefs^^.genomeStrBuffer^^ do          begin					  {TextBox(buf^, bufIndex, r, teFlushLeft);}            TESetText(buf^, bufIndex, rec^^.editRec);            TEUpdate(r, rec^^.editRec);          end;        TextFont(systemFont);     {Set the font to draw in}				DrawControls(prefs^^.GenomeWindow);{Draw all the controls}				DrawGrowIcon(prefs^^.GenomeWindow);{Draw the grow Icon again}    {renderStrBuffer(prefs^^.genomeStrBuffer, prefs^^.GenomeWindow);}				SetPort(SavePort);      {Restore the old port}			end;                {End for if (GenomeWindow<>nil)}	end;                    {End of procedure}{=================================}{Open our window and draw everything}	procedure Open_Genome_Window (prefs: ArthromorphPreferencesHandle);	begin                   {Start of Window open routine}		if (prefs^^.GenomeWindow = nil) then      {Handle an open when already opened}			begin        {Get the window from the resource file}				prefs^^.GenomeWindow := GetNewWindow(1, nil, Pointer(-1));        SetWRefCon(prefs^^.GenomeWindow, longint(ord(NewWatchDocRec(prefs^^.GenomeWindow))));				SetPort(prefs^^.GenomeWindow);      {Prepare to write into our window}				ShowWindow(prefs^^.GenomeWindow);     {Show the window now}				SelectWindow(prefs^^.GenomeWindow);{Bring our window to the front}			end               {End for if (GenomeWindow<>nil)}		else			SelectWindow(prefs^^.GenomeWindow);{Already open, so show it}	end;                    {End of procedure}{=================================}{Handle action to our window, like controls}	procedure Do_Genome_Window (prefs: ArthromorphPreferencesHandle; myEvent: EventRecord);		var			code: integer;           {Location of event in window or controls}			whichWindow: WindowPtr;      {Window pointer where event happened}			myPt: Point;           {Point where event happened}			theControl: ControlHandle;     {Handle for a control}      theControlPart: integer;      message: Str255;      rec: WatchDocRecHandle;	begin                   {Start of Window handler}		if (prefs^^.GenomeWindow <> nil) then     {Handle only when the window is valid}			begin        rec := WatchDocRecHandle(GetWRefCon(prefs^^.GenomeWindow));				code := FindWindow(myEvent.where, whichWindow);{Get where in window and which window}				if (myEvent.what = MouseDown) and (prefs^^.GenomeWindow = whichWindow) then					begin            {Get mouse position}						myPt := myEvent.where;            {with prefs^^.GenomeWindow^.portBits.bounds do}{Make it relative}							{begin}								{myPt.h := myPt.h + left;}								{myPt.v := myPt.v + top;}							{end;}            GlobalToLocal(myPt); {Make it relative the easy way -- ABC}					end;				if (prefs^^.GenomeWindow = whichWindow) and (code = inContent) then{for our window}          begin						code := FindControl(myPt, whichWindow, theControl);{Get type of control}						if (code <> 0) then{Check type of control}              begin							  theControlPart := TrackControl(theControl, myPt, @TrackScrollBar);{Track the control}              {Mouse button released with cursor still inside control}              end;					end;              {End for if (GenomeWindow=whichWindow)}			end;                {End for if (GenomeWindow<>nil)}	end;                    {End of procedure}{=================================}  procedure ActivateGenomeWindow(whichWindow: WindowPtr; myEvent: EventRecord);  var    rec: WatchDocRecHandle;  begin    rec := WatchDocRecHandle(GetWRefCon(whichWindow));    TEActivate(rec^^.editRec);  end;end.                    {End of unit}