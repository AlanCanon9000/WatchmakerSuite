unit unit_update_animals;  {$mode macpas}{$H+}interface	uses {$IFC UNDEFINED THINK_Pascal}		Quickdraw,  {$ENDC}		unit_boxes, unit_evolve, unit_preferences, unit_breed_docrec;	function UpdateAnimals (prefs: ArthromorphPreferencesHandle; rec: BreedingDocRecHandle): BOOLEAN;implementation {Called by Update_Breeding_Window}	uses {$IFC UNDEFINED THINK_Pascal} {$ENDC}		unit_atom_minimalanimal, unit_draw, unit_richard;	function UpdateAnimals (prefs: ArthromorphPreferencesHandle; rec: BreedingDocRecHandle): BOOLEAN;		var			theBox: AnimalBoxHandle;			VerticalOffset: integer;			finishedWithAnimation: boolean;	begin		finishedWithAnimation := true;		with prefs^^ do			begin        if enlargeBrood then          begin            enlargeBrood := false;            finishedWithAnimation := false;            rec^^.estate := evolve(prefs^^.theBoxes^^.MidBox^^.centre);            rec^^.estate^^.preserveLivingSpecimens := true;          end        else if rec^^.eState <> nil then					begin						evolveStep(prefs, rec^^.eState);						if rec^^.eState^^.evolveOp = EvolveComplete then							begin								DisposeEvolveState(rec^^.eState);								rec^^.eState := nil							end						else							finishedWithAnimation := false;					end				else if resizing then					begin						SetupBoxes(theBoxes, BreedingWindow^.portRect);            DrawBoxes(theBoxes);            theBox := theBoxes^^.firstAnimalBox;            while theBox <> nil do              begin						    if theBox^^.BreedersChoice <> nil then							  	VerticalOffset := DrawInBox(prefs, theBox, 0);                theBox := theBox^^.next;              end;						resizing := False;					end				else if startingUp then					with theBoxes^^ do						begin							SetUpBoxes(theBoxes, BreedingWindow^.portRect);              DrawBoxes(theBoxes);							midBox^^.BreedersChoice := MinimalAnimal;							PrintMiddle(prefs, MidBox);							rec^^.eState := evolve(midBox^^.centre);              finishedWithAnimation := false;							startingUp := False						end				else if redraw then {new pictures for animals}          {(because wantcolor, sideways, or centring changed)}					begin						Drawboxes(theBoxes); {straight up refresh}            theBox := theBoxes^^.firstAnimalBox;						while theBox <> nil do              begin							  if theBox^^.BreedersChoice <> nil then								  VerticalOffset := DrawInBox(prefs, theBox, verticaloffset);                theBox := theBox^^.next;              end;						redraw := false;					end				else					begin						Drawboxes(theBoxes); {straight up refresh}						with theBoxes^^ do  						Drawboxes(theBoxes); {straight up refresh}              theBox := theBoxes^^.firstAnimalBox;  						while theBox <> nil do                begin									DrawPicture(theBox^^.AnimalPicture, theBox^^.box);                  theBox := theBox^^.next;								end;					end;			end;		UpdateAnimals := finishedWithAnimation;	end; {UpdateAnimal}end.