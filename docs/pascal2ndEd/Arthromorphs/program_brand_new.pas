{The Project should have the following files in it:     }{     µRunTime.lib     LSP This is for main Pascal runtime library}{     Interface.lib      LSP This is the Mac trap interfaces}{     PrintCalls.Lib    LSP This is the print routine library interface}{     MacPrint.p        LSP This is the print equates for print calls}{     InitTheMenus.Pas      This initializes the Menus.}{     Error_Alert       Alert}{     Preferences       Modal Dialog}{     Engineering_Window       Modeless Dialog}{     Genome_Window       Window}{     Breeding_Window       Window}{     About_Arthromorphs       Window}{    HandleTheMenus         Handle the menu selections.}{Set  RUN OPTIONS to use the  resource file Brand_New_SecondEdition.RSRC  }{ RMaker file to use is Brand_New.R  }{   Brand_New.Pas      Main program  }program program_brand_new;{Program name:  Brand_New.Pas  }{Function:  This is the main module for this program.  }{History: 12/15/90 Original by Prototyper (Richard Dawkins) }{2015-11-05 Second Edition by Alan Canon}uses{$IFC UNDEFINED THINK_Pascal}  Events, TextEdit, Memory, Quickdraw, Fonts, Menus, Windows, Dialogs,  Desk, SegLoad, OSUtils,{$ENDC}  unit_init_the_menus, unit_main_event_handler,  unit_breeding_window, unit_genome_window, unit_about_arthromorphs,  unit_preferences, unit_disk,  unit_quit, unit_atoms, unit_boxes;var                   {Main variables}  doneFlag: boolean;       {Exit program flag}  theInput: TEHandle;        {Used in text edit selections}  myEvent: EventRecord;      {Event record for all events}  DocumentMessage, DocumentCount: integer;  prefs: ArthromorphPreferencesHandle;  i: LONGINT;begin                   {Start of main body}  MaxApplZone;  {This reserves space for more handles}  for i := 0 to 69 + (YARDSIZE div 64) + (MAXBOXES div 64) do    MoreMasters; {64 more handles}  InitGraf(@thePort);       {Quickdraw Init}  InitFonts;            {Font manager init}  InitWindows;            {Window manager init}  InitMenus;            {Menu manager init}  TEInit;             {Text edit init}  InitDialogs(nil);         {Dialog manager}  InitCursor;           {Make an arrow cursor}  FlushEvents(everyEvent, 0);{Clear out all events}  GetDateTime(randSeed);  ZeroAtomCount;  Init_My_Menus;          {Initialize menu bar}  prefs := NewArthromorphPreferences;  {Initialize the window routines}  Init_Breeding_Window(prefs);  Init_Genome_Window(prefs);       {Initialize the window routines}  Init_About_Arthromorphs(prefs);      {Initialize the window routines}  CountAppFiles(DocumentMessage, DocumentCount);  if DocumentCount > 0 then {at least one biomorph double-clicked}  begin    StartDocument(prefs);  end;  Open_Breeding_Window(prefs);  {Breed(prefs, theBoxes);}  theInput := nil;          {Init to no text edit selection active}  doneFlag := False;        {Do not exit program yet}  repeat              {Start of main event loop}    if (theInput <> nil) then {See if a TE is active}      TEIdle(theInput);     {Blink the cursor if everything is ok}    SystemTask;         {For support of desk accessories}    if WaitNextEvent(everyEvent, myEvent, 1, nil) then {If event then...}      doneFlag := handleEvent(prefs, myEvent);  until doneFlag;         {End of the event loop}  QuitGracefully(prefs);end.                    {End of the program}