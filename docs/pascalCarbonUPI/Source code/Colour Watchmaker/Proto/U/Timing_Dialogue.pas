unit Timing_Dialogue;{File name: Timing_Dialogue}{Function: Handle a modal dialog}{ History: 6/10/91 Original by Prototyper 3.0   }interface	uses		PCommonExhibition, Common_Exhibition, {Common and types}		PUtils_Exhibition, Utils_Exhibition, MacOSAll; {General Utilities}	{Init the modal dialog}	procedure D_Init_Timing_Dialogue;	{Hook into the modal dialog filter routine}	function D_Filter_Timing_Dialogue (theDialog: DialogPtr; var theEvent: EventRecord; var itemHit: integer): boolean;	{Refresh the modal dialog}	procedure D_Refresh_Timing_Dialogue (theDialog: DialogPtr);	{Setup the modal dialog}	procedure D_Setup_Timing_Dialogue (theDialog: DialogPtr);	{Hit in the modal dialog}	procedure D_Hit_Timing_Dialogue (theDialog: DialogPtr; itemHit: integer; var ExitDialog: boolean);	{Exit the modal dialog}	procedure D_Exit_Timing_Dialogue (theDialog: DialogPtr);{=======================================================}implementation{Routine: D_Init_Timing_Dialogue}{Purpose: This routine is called while when the program is first run.}{	This is used for onetime initialization.}	procedure D_Init_Timing_Dialogue;	begin     																{Start of init dialog}	end; 																	{End of procedure}{=======================================================}	{Routine: D_Filter_Timing_Dialogue}	{Purpose: This routine is called while inside of the Modal Dialog filter}	{	theDialog is the dialog(alert) pointer}	{	theEvent is the event that we are to see if we should filter}	{	itemHit is the item we set if we handle the event ourselves}	function D_Filter_Timing_Dialogue (theDialog: DialogPtr; var theEvent: EventRecord; var itemHit: integer): boolean;	begin 																{Start of modal dialog filter hook}		D_Filter_Timing_Dialogue := FALSE;     					{Let the modal routine handle it}	end;  																{End of function}{=======================================================}		{Routine: D_Refresh_Timing_Dialogue}		{Purpose: Refresh the modal dialog}	procedure D_Refresh_Timing_Dialogue;		var			tempRect: Rect;   												{Temporary rectangle}			DType: Integer;    												{Type of dialog item}			DItem: Handle;     												{Handle to the dialog item}			sTemp: Str255;   												{Get text entered, temp holding}	begin     												{Start of Refresh dialog}		GetDialogItem(theDialog, 11, DType, DItem, tempRect);{Get item handle}		NumToString(MonsterRevert, sTemp);		SetDialogItemText(DItem, sTemp);		GetDialogItem(theDialog, 12, DType, DItem, tempRect);{Get item handle}		NumToString(MonsterInterval, sTemp);		SetDialogItemText(DItem, sTemp);	end;   															{End of procedure}{=======================================================}			{Routine: D_Setup_Timing_Dialogue}			{Purpose: Setup the modal dialog}	procedure D_Setup_Timing_Dialogue;	begin   														{Start of Setup dialog}	end;    														{End of procedure}{=======================================================}				{Routine: D_Hit_Timing_Dialogue}				{Purpose: Hit in the modal dialog}	procedure D_Hit_Timing_Dialogue;	begin    													{Start of Hit dialog}		if (ItemHit = Res_Dlg_OK) then  					{Handle the Button being pressed}			begin			end;{if (ItemHit = Res_Dlg_Cancel) then }				{Handle the Button being pressed}		begin		end;	end;     													{End of procedure}{=======================================================}					{Routine: D_Exit_Timing_Dialogue}					{Purpose: Exit the modal dialog}	procedure D_Exit_Timing_Dialogue (theDialog: DialogPtr);		var			tempRect: Rect;   												{Temporary rectangle}			DType: Integer;    												{Type of dialog item}			DItem: Handle;     												{Handle to the dialog item}			sTemp: Str255;   												{Get text entered, temp holding}	begin     												{Start of Exit dialog}		GetDialogItem(theDialog, 11, DType, DItem, tempRect);{Get item handle}		GetDialogItemText(DItem, sTemp);    							{Get the text entered}		sTemp := stripped(sTemp);		StringToNum(sTemp, MonsterRevert);		GetDialogItem(theDialog, 12, DType, DItem, tempRect);{Get item handle}		GetDialogItemText(DItem, sTemp);    							{Get the text entered}		sTemp := stripped(sTemp);		StringToNum(sTemp, MonsterInterval);	end; 													{End of procedure}{=======================================================}end.    																		{End of unit}