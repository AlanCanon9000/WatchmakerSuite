{Created: Tuesday, July 30, 1991 at 4:00 PM Files.p Pascal Interface to the Macintosh Libraries  Copyright Apple Computer, Inc. 1985-1991  All rights reserved    This file is used in these builds: BigBang	Change History (most recent first):		<37>	11/19/91	JL		Changed lower case 'of' spelling to uppercase in FSSpecArray for									consistency.		<36>	 7/30/91	JL		Updated Copyright. Restored comments.		<35>	 6/14/91	JL		Checked in official MPW 3.2Ä version. Changed field comments in									records: AFPVolMountInfo and VolMountInfoHeader to match C									header. Also moved the Ptr declaration to those records to									before the record declaration to match DSG Database output.									Added comment on the constant, ioDirFlag, to match C header.									Lost correct '91 copyright date but will restore it later. Added									AppleShareMediaType constant to be consistent with C header.		<34>	  2/5/91	dnf		stb, gs, Add VolMountInfoHeader.		<33>	  2/4/91	JL		changed ioDirFlag back to 3. A BTST and a BitTst are different									so the assembly and higher level languages have to be different.									It's better to leave it the way it always has been.		<32>	  2/1/91	stb		dnf,dnf003: change the inlines to set the HFS bit (10 in the									trap word) for all HFS calls which have a dirID (CatSearch,									Get|SetForeignPrivs).		<31>	 1/28/91	LN		Checked in Database Generated File from DSG. changed SIGNEDBYTE									to SignedByte in numerous places. Only built in types like									INTEGER should be in all uppercase.anged file to match C header.		<30>	 1/25/91	stb		JDR: add fsUnixPriv		<29>	 1/23/91	stb		RC: harmonize with Files.h		<28>	 1/18/91	stb		& dnf; add Get/SetForeignPrivs; add authentication constants;									changed vMServerAdr to a Handle		<27>	 1/10/91	PP		(ngk) Add VolumeMount header structure.		<26>	  1/7/91	JDR		(dba) Adding routines PBGetVolMountInfoSize, PBGetVolMountInfo,									and PBVolumeMount.		<25>	  1/2/91	dba		(JDR) fix AllocContig trap word		<24>	 12/6/90	JL		Fixed PBLockRange,PBUnlockRange,PBSetVInfo Sync and ASync inline									code. Wasn't getting selector into A0 and was calling wrong trap									numbers.		<23>	 12/5/90	dba		<dnf> Fix inlines for PBOpenDFSync, PBOpenDFAsync,									PBHOpenDFSync, and PBHOpenDFAsync. Add GetVolParmsInfoBuffer									definition, definitions for desktop database icon types, and									definitions for vMAttrib bits.	  	<22>	10/30/90	dnf		(dnf/ngk) Move FSpCreateResFile and FSpOpenResFile header to appropriate	   								resource header files.   Added OpenDF and HOpenDF high-level glue.									Removed async parameter for DTGetPath, DTCloseDown and DTOpenInform.									(dnf/th) Changed FXInfo and DXInfo to add fdXFlags/frXFlags fields.		<21>	10/10/90	JL		Fixed Inline for QHdrs and uncommented PBCatSearch		<20>	  10/8/90	JAL		Added Sync and Async calls to get around calling glue each time.		<19>	  9/6/90	JNG		Change CHARS to SIGNEDBYTES		<17>	  9/5/90	JNG		Update FXInfo and DXInfo		<16>	 8/29/90	dnf		Add FSpExchangeFiles, Fix definition of FSpCreateResFile		<15>	  8/6/90	dnf		Add inline dispatching for code FSp traps. Remove FSpGlue.		<14>	  8/6/90	dnf		Add definitions for FSp traps		<13>	  8/4/90	ngk		Change StringPtr to Str255 in FS routines.		<12>	 6/20/90	ngk		Change FSSpec glue to not use pointers, since they are implicit									in Pascal.		<11>	  6/2/90	dnf		Correct length of priv array in CatPositionRec, add FSSpecPtr,									add definitions for FSP glue.		<10>	  5/4/90	dnf		Add MakeFSSpec function definition		 <9>	 4/25/90	dnf		Fix DTPBRec		 <8>	 4/13/90	dnf		Add ioAPPLParID, ioDTLgLen and ioDTPyLen to DTParam.  Move it									out of HParamBlockRec (since it's now too big) and rename it									(since there's a different convention for things that aren't in									HParamBlockRec).		 <7>	 3/16/90	dnf		Added FSSpec record and AltAccessParam. Changed DT call names to									match latest from traps.a. Added OpenDF/HOpenDF and									Get/SetAltAccess. Removed obsolete call names again and also									removed non-existant high-level FileOpen calls.		 <6>	 3/02/90	JAL		Put PBH calls back for compatibility.		 <5>	 2/25/90	dnf		Fix CatSearch and Desktop manager param blocks. Remove obsolete									call names. Add SpecBits constants.** 1.2	ngk 11/11/1989 	Added Desktop manger calls** 1.1	EKN 07/31/1989 Added FIDParam and FileIDs calls.** 1.0	CCH 11/17/1988 Adding to EASE.} UNIT Files; INTERFACE USES Types, OSUtils, SegLoad;CONST{ Finder Constants }fsAtMark = 0;fOnDesk = 1;fsCurPerm = 0;fHasBundle = 8192;fsRdPerm = 1;fInvisible = 16384;fTrash = -3;fsWrPerm = 2;fDesktop = -2;fsRdWrPerm = 3;fDisk = 0;fsRdWrShPerm = 4;fsFromStart = 1;fsFromLEOF = 2;fsFromMark = 3;rdVerify = 64;ioDirFlg = 3;								{ see IM IV-125 }ioDirMask = $10;fsRtParID = 1;fsRtDirID = 2;{ CatSearch SearchBits Constants }fsSBPartialName = 1;fsSBFullName = 2;fsSBFlAttrib = 4;fsSBFlFndrInfo = 8;fsSBFlLgLen = 32;fsSBFlPyLen = 64;fsSBFlRLgLen = 128;fsSBFlRPyLen = 256;fsSBFlCrDat = 512;fsSBFlMdDat = 1024;fsSBFlBkDat = 2048;fsSBFlXFndrInfo = 4096;fsSBFlParID = 8192;fsSBNegate = 16384;fsSBDrUsrWds = 8;fsSBDrNmFls = 16;fsSBDrCrDat = 512;fsSBDrMdDat = 1024;fsSBDrBkDat = 2048;fsSBDrFndrInfo = 4096;fsSBDrParID = 8192;{ vMAttrib (GetVolParms) bit position constants }bLimitFCBs = 31;bLocalWList = 30;bNoMiniFndr = 29;bNoVNEdit = 28;bNoLclSync = 27;bTrshOffLine = 26;bNoSwitchTo = 25;bNoDeskItems = 20;bNoBootBlks = 19;bAccessCntl = 18;bNoSysDir = 17;bHasExtFSVol = 16;bHasOpenDeny = 15;bHasCopyFile = 14;bHasMoveRename = 13;bHasDesktopMgr = 12;bHasShortName = 11;bHasFolderLock = 10;bHasPersonalAccessPrivileges = 9;bHasUserGroupList = 8;bHasCatSearch = 7;bHasFileIDs = 6;bHasBTreeMgr = 5;bHasBlankAccessPrivileges = 4;{ Desktop Database icon Constants }kLargeIcon = 1;kLarge4BitIcon = 2;kLarge8BitIcon = 3;kSmallIcon = 4;kSmall4BitIcon = 5;kSmall8BitIcon = 6;kLargeIconSize = 256;kLarge4BitIconSize = 512;kLarge8BitIconSize = 1024;kSmallIconSize = 64;kSmall4BitIconSize = 128;kSmall8BitIconSize = 256;{ Foreign Privilege Model Identifiers }fsUnixPriv = 1;{ Version Release Stage Codes }developStage = $20;alphaStage = $40;betaStage = $60;finalStage = $80;{ Authentication Constants }kNoUserAuthentication = 1;kPassword = 2;kEncryptPassword = 3;kTwoWayEncryptPassword = 6;TYPECInfoType = (hFileInfo,dirInfo);FXInfo = RECORD fdIconID: INTEGER;							{Icon ID} fdUnused: ARRAY [1..3] OF INTEGER;			{unused but reserved 6 bytes} fdScript: SignedByte;						{Script flag and number} fdXFlags: SignedByte;						{More flag bits} fdComment: INTEGER;						{Comment ID} fdPutAway: LONGINT;						{Home Dir ID} END;DInfo = RECORD frRect: Rect;								{folder rect} frFlags: INTEGER;							{Flags} frLocation: Point;							{folder location} frView: INTEGER;							{folder view} END;DXInfo = RECORD frScroll: Point;							{scroll position} frOpenChain: LONGINT;						{DirID chain of open folders} frScript: SignedByte;						{Script flag and number} frXFlags: SignedByte;						{More flag bits} frComment: INTEGER;						{comment} frPutAway: LONGINT;						{DirID} END;GetVolParmsInfoBuffer = RECORD vMVersion: INTEGER;						{version number} vMAttrib: LONGINT;							{bit vector of attributes (see vMAttrib constants)} vMLocalHand: Handle;						{handle to private data} vMServerAdr: LONGINT;						{AppleTalk server address or zero} vMVolumeGrade: LONGINT;					{approx. speed rating or zero if unrated} vMForeignPrivID: INTEGER;					{foreign privilege model supported or zero if none} END;CInfoPBPtr = ^CInfoPBRec;CInfoPBRec = RECORD qLink: QElemPtr; qType: INTEGER; ioTrap: INTEGER; ioCmdAddr: Ptr; ioCompletion: ProcPtr; ioResult: OSErr; ioNamePtr: StringPtr; ioVRefNum: INTEGER; ioFRefNum: INTEGER; ioFVersNum: SignedByte; filler1: SignedByte; ioFDirIndex: INTEGER; ioFlAttrib: SignedByte; filler2: SignedByte; CASE CInfoType OF   hFileInfo:  (ioFlFndrInfo: FInfo;  ioDirID: LONGINT;  ioFlStBlk: INTEGER;  ioFlLgLen: LONGINT;  ioFlPyLen: LONGINT;  ioFlRStBlk: INTEGER;  ioFlRLgLen: LONGINT;  ioFlRPyLen: LONGINT;  ioFlCrDat: LONGINT;  ioFlMdDat: LONGINT;  ioFlBkDat: LONGINT;  ioFlXFndrInfo: FXInfo;  ioFlParID: LONGINT;  ioFlClpSiz: LONGINT);   dirInfo:  (ioDrUsrWds: DInfo;  ioDrDirID: LONGINT;  ioDrNmFls: INTEGER;  filler3: ARRAY [1..9] OF INTEGER;  ioDrCrDat: LONGINT;  ioDrMdDat: LONGINT;  ioDrBkDat: LONGINT;  ioDrFndrInfo: DXInfo;  ioDrParID: LONGINT); END;{ Catalog position record }CatPositionRec = RECORD initialize: LONGINT; priv: ARRAY [1..6] OF INTEGER; END;FSSpecPtr = ^FSSpec;FSSpecHandle = ^FSSpecPtr;FSSpec = RECORD vRefNum: INTEGER; parID: LONGINT; name: Str63; END;FSSpecArrayPtr = ^FSSpecArray;FSSpecArrayHandle = ^FSSpecArrayPtr;FSSpecArray = ARRAY [0..0] OF FSSpec;{ The following are structures to be filled out with the _GetVolMountInfo call and passed back into the _VolumeMount call for external file system mounts. }VolumeType = OSType;						{ the "signature" of the file system }CONSTAppleShareMediaType = 'afpm';				{ the signature for AppleShare }TYPEVolMountInfoPtr = ^VolMountInfoHeader;VolMountInfoHeader = RECORD length: INTEGER;							{ length of location data (including self) } media: VolumeType;							{ type of media.  Variable length data follows } END;AFPVolMountInfoPtr = ^AFPVolMountInfo;AFPVolMountInfo = RECORD length: INTEGER;							{ length of location data (including self) } media: VolumeType;							{ type of media } flags: INTEGER;							{ bits for no messages, no reconnect } nbpInterval: SignedByte;					{ NBP Interval parameter (IM2, p.322) } nbpCount: SignedByte;						{ NBP Interval parameter (IM2, p.322) } uamType: INTEGER;							{ User Authentication Method } zoneNameOffset: INTEGER;					{ short positive offset from start of struct to Zone Name } serverNameOffset: INTEGER;					{ offset to pascal Server Name string } volNameOffset: INTEGER;					{ offset to pascal Volume Name string } userNameOffset: INTEGER;					{ offset to pascal User Name string } userPasswordOffset: INTEGER;				{ offset to pascal User Password string } volPasswordOffset: INTEGER;				{ offset to pascal Volume Password string } AFPData: PACKED ARRAY [1..144] OF CHAR;	{ variable length data may follow } END;DTPBPtr = ^DTPBRec;DTPBRec = RECORD qLink: QElemPtr; qType: INTEGER; ioTrap: INTEGER; ioCmdAddr: Ptr; ioCompletion: ProcPtr; ioResult: OSErr; ioNamePtr: StringPtr; ioVRefNum: INTEGER; ioDTRefNum: INTEGER; ioIndex: INTEGER; ioTagInfo: LONGINT; ioDTBuffer: Ptr; ioDTReqCount: LONGINT; ioDTActCount: LONGINT; filler1: SignedByte; ioIconType: SignedByte; filler2: INTEGER; ioDirID: LONGINT; ioFileCreator: OSType; ioFileType: OSType; ioFiller3: LONGINT; ioDTLgLen: LONGINT; ioDTPyLen: LONGINT; ioFiller4: ARRAY [1..14] OF INTEGER; ioAPPLParID: LONGINT; END;HParmBlkPtr = ^HParamBlockRec;HParamBlockRec = RECORD qLink: QElemPtr; qType: INTEGER; ioTrap: INTEGER; ioCmdAddr: Ptr; ioCompletion: ProcPtr; ioResult: OSErr; ioNamePtr: StringPtr; ioVRefNum: INTEGER; CASE ParamBlkType OF   IOParam:  (ioRefNum: INTEGER;  ioVersNum: SignedByte;  ioPermssn: SignedByte;  ioMisc: Ptr;  ioBuffer: Ptr;  ioReqCount: LONGINT;						{size of buffer area}  ioActCount: LONGINT;						{length of vol parms data}  ioPosMode: INTEGER;  ioPosOffset: LONGINT);   FileParam:  (ioFRefNum: INTEGER;  ioFVersNum: SignedByte;  filler1: SignedByte;  ioFDirIndex: INTEGER;  ioFlAttrib: SignedByte;  ioFlVersNum: SignedByte;  ioFlFndrInfo: FInfo;  ioDirID: LONGINT;  ioFlStBlk: INTEGER;  ioFlLgLen: LONGINT;  ioFlPyLen: LONGINT;  ioFlRStBlk: INTEGER;  ioFlRLgLen: LONGINT;  ioFlRPyLen: LONGINT;  ioFlCrDat: LONGINT;  ioFlMdDat: LONGINT);   VolumeParam:  (filler2: LONGINT;  ioVolIndex: INTEGER;  ioVCrDate: LONGINT;  ioVLsMod: LONGINT;  ioVAtrb: INTEGER;  ioVNmFls: INTEGER;  ioVBitMap: INTEGER;  ioAllocPtr: INTEGER;  ioVNmAlBlks: INTEGER;  ioVAlBlkSiz: LONGINT;  ioVClpSiz: LONGINT;  ioAlBlSt: INTEGER;  ioVNxtCNID: LONGINT;  ioVFrBlk: INTEGER;  ioVSigWord: INTEGER;  ioVDrvInfo: INTEGER;  ioVDRefNum: INTEGER;  ioVFSID: INTEGER;  ioVBkUp: LONGINT;  ioVSeqNum: INTEGER;  ioVWrCnt: LONGINT;  ioVFilCnt: LONGINT;  ioVDirCnt: LONGINT;  ioVFndrInfo: ARRAY [1..8] OF LONGINT);   AccessParam:  (filler3: INTEGER;  ioDenyModes: INTEGER;						{access rights data}  filler4: INTEGER;  filler5: SignedByte;  ioACUser: SignedByte;						{access rights for directory only}  filler6: LONGINT;  ioACOwnerID: LONGINT;						{owner ID}  ioACGroupID: LONGINT;						{group ID}  ioACAccess: LONGINT);						{access rights}   ObjParam:  (filler7: INTEGER;  ioObjType: INTEGER;						{function code}  ioObjNamePtr: Ptr;						{ptr to returned creator/group name}  ioObjID: LONGINT);						{creator/group ID}   CopyParam:  (ioDstVRefNum: INTEGER;					{destination vol identifier}  filler8: INTEGER;  ioNewName: Ptr;							{ptr to destination pathname}  ioCopyName: Ptr;							{ptr to optional name}  ioNewDirID: LONGINT);						{destination directory ID}   WDParam:  (filler9: INTEGER;  ioWDIndex: INTEGER;  ioWDProcID: LONGINT;  ioWDVRefNum: INTEGER;  filler10: INTEGER;  filler11: LONGINT;  filler12: LONGINT;  filler13: LONGINT;  ioWDDirID: LONGINT);   FIDParam:  (filler14: LONGINT;  ioDestNamePtr: StringPtr;  filler15: LONGINT;  ioDestDirID: LONGINT;  filler16: LONGINT;  filler17: LONGINT;  ioSrcDirID: LONGINT;  filler18:  INTEGER;  ioFileID:  LONGINT);   CSParam:  (ioMatchPtr: FSSpecArrayPtr;				{match array}  ioReqMatchCount: LONGINT; 				{maximum allowable matches}  ioActMatchCount: LONGINT; 				{actual match count}  ioSearchBits: LONGINT;   					{search criteria selector}  ioSearchInfo1: CInfoPBPtr; 				{search values and range lower bounds}  ioSearchInfo2: CInfoPBPtr; 				{search values and range upper bounds}  ioSearchTime: LONGINT;  					{length of time to run the search}  ioCatPosition: CatPositionRec; 			{current position in the catalog}  ioOptBuffer: Ptr;   						{optional performance enhancement buffer}  ioOptBufSize: LONGINT);  					{length of buffer pointed to by ioOptBuffer}   ForeignPrivParam:    (filler21: LONGINT;  filler22: LONGINT;  ioForeignPrivBuffer: Ptr;  ioForeignPrivReqCount: LONGINT;  ioForeignPrivActCount: LONGINT;  filler23: LONGINT;  ioForeignPrivDirID: LONGINT;  ioForeignPrivInfo1: LONGINT;  ioForeignPrivInfo2: LONGINT;  ioForeignPrivInfo3: LONGINT;  ioForeignPrivInfo4: LONGINT); END;CMovePBPtr = ^CMovePBRec;CMovePBRec = RECORD qLink: QElemPtr; qType: INTEGER; ioTrap: INTEGER; ioCmdAddr: Ptr; ioCompletion: ProcPtr; ioResult: OSErr; ioNamePtr: StringPtr; ioVRefNum: INTEGER; filler1: LONGINT; ioNewName: StringPtr; filler2: LONGINT; ioNewDirID: LONGINT; filler3: ARRAY [1..2] OF LONGINT; ioDirID: LONGINT; END;WDPBPtr = ^WDPBRec;WDPBRec = RECORD qLink: QElemPtr; qType: INTEGER; ioTrap: INTEGER; ioCmdAddr: Ptr; ioCompletion: ProcPtr; ioResult: OSErr; ioNamePtr: StringPtr; ioVRefNum: INTEGER; filler1: INTEGER; ioWDIndex: INTEGER; ioWDProcID: LONGINT; ioWDVRefNum: INTEGER; filler2: ARRAY [1..7] OF INTEGER; ioWDDirID: LONGINT; END;FCBPBPtr = ^FCBPBRec;FCBPBRec = RECORD qLink: QElemPtr; qType: INTEGER; ioTrap: INTEGER; ioCmdAddr: Ptr; ioCompletion: ProcPtr; ioResult: OSErr; ioNamePtr: StringPtr; ioVRefNum: INTEGER; ioRefNum: INTEGER; filler: INTEGER; ioFCBIndx: INTEGER; filler1: INTEGER; ioFCBFlNm: LONGINT; ioFCBFlags: INTEGER; ioFCBStBlk: INTEGER; ioFCBEOF: LONGINT; ioFCBPLen: LONGINT; ioFCBCrPs: LONGINT; ioFCBVRefNum: INTEGER; ioFCBClpSiz: LONGINT; ioFCBParID: LONGINT; END;{ Numeric version part of 'vers' resource }NumVersion = PACKED RECORD CASE INTEGER OF   0:  (majorRev: SignedByte;					{1st part of version number in BCD}  minorRev: 0..9;							{2nd part is 1 nibble in BCD}  bugFixRev: 0..9;							{3rd part is 1 nibble in BCD}  stage: SignedByte;						{stage code: dev, alpha, beta, final}  nonRelRev: SignedByte);					{revision level of non-released version}   1:  (version: LONGINT);						{to use all 4 fields at one time} END;{ 'vers' resource format }VersRecPtr = ^VersRec;VersRecHndl = ^VersRecPtr;VersRec = RECORD numericVersion: NumVersion;				{encoded version number} countryCode: INTEGER;						{country code from intl utilities} shortVersion: Str255;						{version number string - worst case} reserved: Str255;							{longMessage string packed after shortVersion} END;FUNCTION PBOpen(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBOpenSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBOpenAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBClose(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBCloseSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBCloseAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBRead(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBReadSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBReadAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBWrite(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBWriteSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBWriteAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetVInfo(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBGetVInfoSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetVInfoAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetVol(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBGetVolSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetVolAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetVol(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetVolSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetVolAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBFlushVol(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBFlushVolSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBFlushVolAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBCreate(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBCreateSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBCreateAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBDelete(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBDeleteSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBDeleteAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBOpenDF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBOpenDFSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBOpenDFAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBOpenRF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBOpenRFSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBOpenRFAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBRename(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBRenameSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBRenameAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetFInfo(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBGetFInfoSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetFInfoAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFInfo(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetFInfoSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFInfoAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFLock(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetFLockSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFLockAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBRstFLock(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBRstFLockSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBRstFLockAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFVers(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetFVersSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFVersAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBAllocate(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBAllocateSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBAllocateAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetEOF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBGetEOFSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetEOFAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetEOF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetEOFSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetEOFAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetFPos(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBGetFPosSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetFPosAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFPos(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetFPosSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetFPosAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBFlushFile(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBFlushFileSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBFlushFileAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBMountVol(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBUnmountVol(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBEject(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBOffLine(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBCatSearch(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBCatSearchSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBCatSearchAsync(paramBlock: HParmBlkPtr): OSErr;PROCEDURE AddDrive(drvrRefNum: INTEGER;drvNum: INTEGER;qEl: DrvQElPtr);FUNCTION FSOpen(fileName: Str255;vRefNum: INTEGER;VAR refNum: INTEGER): OSErr;FUNCTION OpenDF(fileName: Str255;vRefNum: INTEGER;VAR refNum: INTEGER): OSErr;FUNCTION FSClose(refNum: INTEGER): OSErr;FUNCTION FSRead(refNum: INTEGER;VAR count: LONGINT;buffPtr: Ptr): OSErr;FUNCTION FSWrite(refNum: INTEGER;VAR count: LONGINT;buffPtr: Ptr): OSErr;FUNCTION GetVInfo(drvNum: INTEGER;volName: StringPtr;VAR vRefNum: INTEGER; VAR freeBytes: LONGINT): OSErr;FUNCTION GetFInfo(fileName: Str255;vRefNum: INTEGER;VAR fndrInfo: FInfo): OSErr;FUNCTION GetVol(volName: StringPtr;VAR vRefNum: INTEGER): OSErr;FUNCTION SetVol(volName: StringPtr;vRefNum: INTEGER): OSErr;FUNCTION UnmountVol(volName: StringPtr;vRefNum: INTEGER): OSErr;FUNCTION Eject(volName: StringPtr;vRefNum: INTEGER): OSErr;FUNCTION FlushVol(volName: StringPtr;vRefNum: INTEGER): OSErr;FUNCTION Create(fileName: Str255;vRefNum: INTEGER;creator: OSType;fileType: OSType): OSErr;FUNCTION FSDelete(fileName: Str255;vRefNum: INTEGER): OSErr;FUNCTION OpenRF(fileName: Str255;vRefNum: INTEGER;VAR refNum: INTEGER): OSErr;FUNCTION Rename(oldName: Str255;vRefNum: INTEGER;newName: Str255): OSErr;FUNCTION SetFInfo(fileName: Str255;vRefNum: INTEGER;fndrInfo: FInfo): OSErr;FUNCTION SetFLock(fileName: Str255;vRefNum: INTEGER): OSErr;FUNCTION RstFLock(fileName: Str255;vRefNum: INTEGER): OSErr;FUNCTION Allocate(refNum: INTEGER;VAR count: LONGINT): OSErr;FUNCTION GetEOF(refNum: INTEGER;VAR logEOF: LONGINT): OSErr;FUNCTION SetEOF(refNum: INTEGER;logEOF: LONGINT): OSErr;FUNCTION GetFPos(refNum: INTEGER;VAR filePos: LONGINT): OSErr;FUNCTION SetFPos(refNum: INTEGER;posMode: INTEGER;posOff: LONGINT): OSErr;FUNCTION GetVRefNum(fileRefNum: INTEGER;VAR vRefNum: INTEGER): OSErr;FUNCTION PBOpenWD(paramBlock: WDPBPtr;async: BOOLEAN): OSErr;FUNCTION PBOpenWDSync(paramBlock: WDPBPtr): OSErr;FUNCTION PBOpenWDAsync(paramBlock: WDPBPtr): OSErr;FUNCTION PBCloseWD(paramBlock: WDPBPtr;async: BOOLEAN): OSErr;FUNCTION PBCloseWDSync(paramBlock: WDPBPtr): OSErr;FUNCTION PBCloseWDAsync(paramBlock: WDPBPtr): OSErr;FUNCTION PBHSetVol(paramBlock: WDPBPtr;async: BOOLEAN): OSErr;FUNCTION PBHSetVolSync(paramBlock: WDPBPtr): OSErr;FUNCTION PBHSetVolAsync(paramBlock: WDPBPtr): OSErr;FUNCTION PBHGetVol(paramBlock: WDPBPtr;async: BOOLEAN): OSErr;FUNCTION PBHGetVolSync(paramBlock: WDPBPtr): OSErr;FUNCTION PBHGetVolAsync(paramBlock: WDPBPtr): OSErr;FUNCTION PBCatMove(paramBlock: CMovePBPtr;async: BOOLEAN): OSErr;FUNCTION PBCatMoveSync(paramBlock: CMovePBPtr): OSErr;FUNCTION PBCatMoveAsync(paramBlock: CMovePBPtr): OSErr;FUNCTION PBDirCreate(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBDirCreateSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBDirCreateAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBGetWDInfo(paramBlock: WDPBPtr;async: BOOLEAN): OSErr;FUNCTION PBGetWDInfoSync(paramBlock: WDPBPtr): OSErr;FUNCTION PBGetWDInfoAsync(paramBlock: WDPBPtr): OSErr;FUNCTION PBGetFCBInfo(paramBlock: FCBPBPtr;async: BOOLEAN): OSErr;FUNCTION PBGetFCBInfoSync(paramBlock: FCBPBPtr): OSErr;FUNCTION PBGetFCBInfoAsync(paramBlock: FCBPBPtr): OSErr;FUNCTION PBGetCatInfo(paramBlock: CInfoPBPtr;async: BOOLEAN): OSErr;FUNCTION PBGetCatInfoSync(paramBlock: CInfoPBPtr): OSErr;FUNCTION PBGetCatInfoAsync(paramBlock: CInfoPBPtr): OSErr;FUNCTION PBSetCatInfo(paramBlock: CInfoPBPtr;async: BOOLEAN): OSErr;FUNCTION PBSetCatInfoSync(paramBlock: CInfoPBPtr): OSErr;FUNCTION PBSetCatInfoAsync(paramBlock: CInfoPBPtr): OSErr;FUNCTION PBAllocContig(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBAllocContigSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBAllocContigAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBLockRange(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBLockRangeSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBLockRangeAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBUnlockRange(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBUnlockRangeSync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBUnlockRangeAsync(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBSetVInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetVInfoSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBSetVInfoAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetVInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHGetVInfoSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetVInfoAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpen(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHOpenSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenRF(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHOpenRFSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenRFAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenDF(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHOpenDFSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenDFAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHCreate(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHCreateSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHCreateAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHDelete(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHDeleteSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHDeleteAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHRename(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHRenameSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHRenameAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHRstFLock(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHRstFLockSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHRstFLockAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHSetFLock(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHSetFLockSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHSetFLockAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetFInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHGetFInfoSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetFInfoAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHSetFInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHSetFInfoSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHSetFInfoAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBMakeFSSpec(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBMakeFSSpecSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBMakeFSSpecAsync(paramBlock: HParmBlkPtr): OSErr;PROCEDURE FInitQueue;FUNCTION GetFSQHdr: QHdrPtr;FUNCTION GetDrvQHdr: QHdrPtr;FUNCTION GetVCBQHdr: QHdrPtr;FUNCTION HGetVol(volName: StringPtr;VAR vRefNum: INTEGER;VAR dirID: LONGINT): OSErr;FUNCTION HSetVol(volName: StringPtr;vRefNum: INTEGER;dirID: LONGINT): OSErr;FUNCTION HOpen(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;permission: SignedByte; VAR refNum: INTEGER): OSErr;FUNCTION HOpenDF(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;permission: SignedByte; VAR refNum: INTEGER): OSErr;FUNCTION HOpenRF(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;permission: SignedByte; VAR refNum: INTEGER): OSErr;FUNCTION AllocContig(refNum: INTEGER;VAR count: LONGINT): OSErr;FUNCTION HCreate(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;creator: OSType; fileType: OSType): OSErr;FUNCTION DirCreate(vRefNum: INTEGER;parentDirID: LONGINT;directoryName: Str255; VAR createdDirID: LONGINT): OSErr;FUNCTION HDelete(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255): OSErr;FUNCTION HGetFInfo(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;VAR fndrInfo: FInfo): OSErr;FUNCTION HSetFInfo(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;fndrInfo: FInfo): OSErr;FUNCTION HSetFLock(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255): OSErr;FUNCTION HRstFLock(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255): OSErr;FUNCTION HRename(vRefNum: INTEGER;dirID: LONGINT;oldName: Str255;newName: Str255): OSErr;FUNCTION CatMove(vRefNum: INTEGER;dirID: LONGINT;oldName: Str255;newDirID: LONGINT; newName: Str255): OSErr;FUNCTION OpenWD(vRefNum: INTEGER;dirID: LONGINT;procID: LONGINT;VAR wdRefNum: INTEGER): OSErr;FUNCTION CloseWD(wdRefNum: INTEGER): OSErr;FUNCTION GetWDInfo(wdRefNum: INTEGER;VAR vRefNum: INTEGER;VAR dirID: LONGINT; VAR procID: LONGINT): OSErr;FUNCTION PBHGetVolParms(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHGetVolParmsSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetVolParmsAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetLogInInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHGetLogInInfoSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetLogInInfoAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetDirAccess(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHGetDirAccessSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHGetDirAccessAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHSetDirAccess(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHSetDirAccessSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHSetDirAccessAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHMapID(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHMapIDSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHMapIDAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHMapName(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHMapNameSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHMapNameAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHCopyFile(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHCopyFileSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHCopyFileAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHMoveRename(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHMoveRenameSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHMoveRenameAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenDeny(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHOpenDenySync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenDenyAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenRFDeny(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBHOpenRFDenySync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBHOpenRFDenyAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBExchangeFiles(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBExchangeFilesSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBExchangeFilesAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBCreateFileIDRef(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBCreateFileIDRefSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBCreateFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBResolveFileIDRef(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBResolveFileIDRefSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBResolveFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBDeleteFileIDRef(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBDeleteFileIDRefSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBDeleteFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBGetForeignPrivs(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBGetForeignPrivsSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBGetForeignPrivsAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBSetForeignPrivs(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr;FUNCTION PBSetForeignPrivsSync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBSetForeignPrivsAsync(paramBlock: HParmBlkPtr): OSErr;FUNCTION PBDTGetPath(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTCloseDown(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTAddIcon(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTAddIconSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTAddIconAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetIcon(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTGetIconSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetIconAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetIconInfo(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTGetIconInfoSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetIconInfoAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTAddAPPL(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTAddAPPLSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTAddAPPLAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTRemoveAPPL(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTRemoveAPPLSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTRemoveAPPLAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetAPPL(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTGetAPPLSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetAPPLAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTSetComment(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTSetCommentSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTSetCommentAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTRemoveComment(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTRemoveCommentSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTRemoveCommentAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetComment(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTGetCommentSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetCommentAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTFlush(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTFlushSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTFlushAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTReset(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTResetSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTResetAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetInfo(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTGetInfoSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTGetInfoAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTOpenInform(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTDelete(paramBlock: DTPBPtr;async: BOOLEAN): OSErr;FUNCTION PBDTDeleteSync(paramBlock: DTPBPtr): OSErr;FUNCTION PBDTDeleteAsync(paramBlock: DTPBPtr): OSErr;FUNCTION PBGetVolMountInfoSize(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBGetVolMountInfo(paramBlock: ParmBlkPtr): OSErr;FUNCTION PBVolumeMount(paramBlock: ParmBlkPtr): OSErr;FUNCTION FSMakeFSSpec(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255; VAR spec: FSSpec): OSErr;FUNCTION FSpOpenDF(spec: FSSpec;permission: SignedByte;VAR refNum: INTEGER): OSErr;FUNCTION FSpOpenRF(spec: FSSpec ;permission: SignedByte;VAR refNum: INTEGER): OSErr;FUNCTION FSpCreate(spec: FSSpec ;creator: OSType;fileType: OSType;scriptTag: ScriptCode): OSErr;FUNCTION FSpDirCreate(spec: FSSpec;scriptTag: ScriptCode;VAR createdDirID: LONGINT): OSErr;FUNCTION FSpDelete(spec: FSSpec): OSErr;FUNCTION FSpGetFInfo(spec: FSSpec;VAR fndrInfo: FInfo): OSErr;FUNCTION FSpSetFInfo(spec: FSSpec;fndrInfo: FInfo): OSErr;FUNCTION FSpSetFLock(spec: FSSpec): OSErr;FUNCTION FSpRstFLock(spec: FSSpec): OSErr;FUNCTION FSpRename(spec: FSSpec;newName: Str255): OSErr;FUNCTION FSpCatMove(source: FSSpec;dest: FSSpec): OSErr;FUNCTION FSpExchangeFiles(source: FSSpec;dest: FSSpec): OSErr;IMPLEMENTATIONFUNCTION PBOpen(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBOpen := noErr END;FUNCTION PBOpenSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBOpenSync := noErr END;FUNCTION PBOpenAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBOpenAsync := noErr END;FUNCTION PBClose(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBClose := noErr END;FUNCTION PBCloseSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBCloseSync := noErr END;FUNCTION PBCloseAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBCloseAsync := noErr END;FUNCTION PBRead(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBRead := noErr END;FUNCTION PBReadSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBReadSync := noErr END;FUNCTION PBReadAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBReadAsync := noErr END;FUNCTION PBWrite(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBWrite := noErr END;FUNCTION PBWriteSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBWriteSync := noErr END;FUNCTION PBWriteAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBWriteAsync := noErr END;FUNCTION PBGetVInfo(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBGetVInfo := noErr END;FUNCTION PBGetVInfoSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetVInfoSync := noErr END;FUNCTION PBGetVInfoAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetVInfoAsync := noErr END;FUNCTION PBGetVol(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBGetVol := noErr END;FUNCTION PBGetVolSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetVolSync := noErr END;FUNCTION PBGetVolAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetVolAsync := noErr END;FUNCTION PBSetVol(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetVol := noErr END;FUNCTION PBSetVolSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetVolSync := noErr END;FUNCTION PBSetVolAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetVolAsync := noErr END;FUNCTION PBFlushVol(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBFlushVol := noErr END;FUNCTION PBFlushVolSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBFlushVolSync := noErr END;FUNCTION PBFlushVolAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBFlushVolAsync := noErr END;FUNCTION PBCreate(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBCreate := noErr END;FUNCTION PBCreateSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBCreateSync := noErr END;FUNCTION PBCreateAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBCreateAsync := noErr END;FUNCTION PBDelete(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBDelete := noErr END;FUNCTION PBDeleteSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBDeleteSync := noErr END;FUNCTION PBDeleteAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBDeleteAsync := noErr END;FUNCTION PBOpenDF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBOpenDF := noErr END;FUNCTION PBOpenDFSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBOpenDFSync := noErr END;FUNCTION PBOpenDFAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBOpenDFAsync := noErr END;FUNCTION PBOpenRF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBOpenRF := noErr END;FUNCTION PBOpenRFSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBOpenRFSync := noErr END;FUNCTION PBOpenRFAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBOpenRFAsync := noErr END;FUNCTION PBRename(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBRename := noErr END;FUNCTION PBRenameSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBRenameSync := noErr END;FUNCTION PBRenameAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBRenameAsync := noErr END;FUNCTION PBGetFInfo(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBGetFInfo := noErr END;FUNCTION PBGetFInfoSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetFInfoSync := noErr END;FUNCTION PBGetFInfoAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetFInfoAsync := noErr END;FUNCTION PBSetFInfo(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetFInfo := noErr END;FUNCTION PBSetFInfoSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFInfoSync := noErr END;FUNCTION PBSetFInfoAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFInfoAsync := noErr END;FUNCTION PBSetFLock(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetFLock := noErr END;FUNCTION PBSetFLockSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFLockSync := noErr END;FUNCTION PBSetFLockAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFLockAsync := noErr END;FUNCTION PBRstFLock(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBRstFLock := noErr END;FUNCTION PBRstFLockSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBRstFLockSync := noErr END;FUNCTION PBRstFLockAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBRstFLockAsync := noErr END;FUNCTION PBSetFVers(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetFVers := noErr END;FUNCTION PBSetFVersSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFVersSync := noErr END;FUNCTION PBSetFVersAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFVersAsync := noErr END;FUNCTION PBAllocate(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBAllocate := noErr END;FUNCTION PBAllocateSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBAllocateSync := noErr END;FUNCTION PBAllocateAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBAllocateAsync := noErr END;FUNCTION PBGetEOF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBGetEOF := noErr END;FUNCTION PBGetEOFSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetEOFSync := noErr END;FUNCTION PBGetEOFAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetEOFAsync := noErr END;FUNCTION PBSetEOF(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetEOF := noErr END;FUNCTION PBSetEOFSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetEOFSync := noErr END;FUNCTION PBSetEOFAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetEOFAsync := noErr END;FUNCTION PBGetFPos(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBGetFPos := noErr END;FUNCTION PBGetFPosSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetFPosSync := noErr END;FUNCTION PBGetFPosAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetFPosAsync := noErr END;FUNCTION PBSetFPos(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetFPos := noErr END;FUNCTION PBSetFPosSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFPosSync := noErr END;FUNCTION PBSetFPosAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBSetFPosAsync := noErr END;FUNCTION PBFlushFile(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBFlushFile := noErr END;FUNCTION PBFlushFileSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBFlushFileSync := noErr END;FUNCTION PBFlushFileAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBFlushFileAsync := noErr END;FUNCTION PBMountVol(paramBlock: ParmBlkPtr): OSErr; BEGIN PBMountVol := noErr END;FUNCTION PBUnmountVol(paramBlock: ParmBlkPtr): OSErr; BEGIN PBUnmountVol := noErr END;FUNCTION PBEject(paramBlock: ParmBlkPtr): OSErr; BEGIN PBEject := noErr END;FUNCTION PBOffLine(paramBlock: ParmBlkPtr): OSErr; BEGIN PBOffLine := noErr END;FUNCTION PBCatSearch(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBCatSearch := noErr END;FUNCTION PBCatSearchSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBCatSearchSync := noErr END;FUNCTION PBCatSearchAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBCatSearchAsync := noErr END;PROCEDURE AddDrive(drvrRefNum: INTEGER;drvNum: INTEGER;qEl: DrvQElPtr); BEGIN END;FUNCTION FSOpen(fileName: Str255;vRefNum: INTEGER;VAR refNum: INTEGER): OSErr; BEGIN FSOpen := noErr END;FUNCTION OpenDF(fileName: Str255;vRefNum: INTEGER;VAR refNum: INTEGER): OSErr; BEGIN OpenDF := noErr END;FUNCTION FSClose(refNum: INTEGER): OSErr; BEGIN FSClose := noErr END;FUNCTION FSRead(refNum: INTEGER;VAR count: LONGINT;buffPtr: Ptr): OSErr; BEGIN FSRead := noErr END;FUNCTION FSWrite(refNum: INTEGER;VAR count: LONGINT;buffPtr: Ptr): OSErr; BEGIN FSWrite := noErr END;FUNCTION GetVInfo(drvNum: INTEGER;volName: StringPtr;VAR vRefNum: INTEGER; VAR freeBytes: LONGINT): OSErr; BEGIN GetVInfo := noErr END;FUNCTION GetFInfo(fileName: Str255;vRefNum: INTEGER;VAR fndrInfo: FInfo): OSErr; BEGIN GetFInfo := noErr END;FUNCTION GetVol(volName: StringPtr;VAR vRefNum: INTEGER): OSErr; BEGIN GetVol := noErr END;FUNCTION SetVol(volName: StringPtr;vRefNum: INTEGER): OSErr; BEGIN SetVol := noErr END;FUNCTION UnmountVol(volName: StringPtr;vRefNum: INTEGER): OSErr; BEGIN UnmountVol := noErr END;FUNCTION Eject(volName: StringPtr;vRefNum: INTEGER): OSErr; BEGIN Eject := noErr END;FUNCTION FlushVol(volName: StringPtr;vRefNum: INTEGER): OSErr; BEGIN FlushVol := noErr END;FUNCTION Create(fileName: Str255;vRefNum: INTEGER;creator: OSType;fileType: OSType): OSErr; BEGIN Create := noErr END;FUNCTION FSDelete(fileName: Str255;vRefNum: INTEGER): OSErr; BEGIN FSDelete := noErr END;FUNCTION OpenRF(fileName: Str255;vRefNum: INTEGER;VAR refNum: INTEGER): OSErr; BEGIN OpenRF := noErr END;FUNCTION Rename(oldName: Str255;vRefNum: INTEGER;newName: Str255): OSErr; BEGIN Rename := noErr END;FUNCTION SetFInfo(fileName: Str255;vRefNum: INTEGER;fndrInfo: FInfo): OSErr; BEGIN SetFInfo := noErr END;FUNCTION SetFLock(fileName: Str255;vRefNum: INTEGER): OSErr; BEGIN SetFLock := noErr END;FUNCTION RstFLock(fileName: Str255;vRefNum: INTEGER): OSErr; BEGIN RstFLock := noErr END;FUNCTION Allocate(refNum: INTEGER;VAR count: LONGINT): OSErr; BEGIN Allocate := noErr END;FUNCTION GetEOF(refNum: INTEGER;VAR logEOF: LONGINT): OSErr; BEGIN GetEOF := noErr END;FUNCTION SetEOF(refNum: INTEGER;logEOF: LONGINT): OSErr; BEGIN SetEOF := noErr END;FUNCTION GetFPos(refNum: INTEGER;VAR filePos: LONGINT): OSErr; BEGIN GetFPos := noErr END;FUNCTION SetFPos(refNum: INTEGER;posMode: INTEGER;posOff: LONGINT): OSErr; BEGIN SetFPos := noErr END;FUNCTION GetVRefNum(fileRefNum: INTEGER;VAR vRefNum: INTEGER): OSErr; BEGIN GetVRefNum := noErr END;FUNCTION PBOpenWD(paramBlock: WDPBPtr;async: BOOLEAN): OSErr; BEGIN PBOpenWD := noErr END;FUNCTION PBOpenWDSync(paramBlock: WDPBPtr): OSErr; BEGIN PBOpenWDSync := noErr END;FUNCTION PBOpenWDAsync(paramBlock: WDPBPtr): OSErr; BEGIN PBOpenWDAsync := noErr END;FUNCTION PBCloseWD(paramBlock: WDPBPtr;async: BOOLEAN): OSErr; BEGIN PBCloseWD := noErr END;FUNCTION PBCloseWDSync(paramBlock: WDPBPtr): OSErr; BEGIN PBCloseWDSync := noErr END;FUNCTION PBCloseWDAsync(paramBlock: WDPBPtr): OSErr; BEGIN PBCloseWDAsync := noErr END;FUNCTION PBHSetVol(paramBlock: WDPBPtr;async: BOOLEAN): OSErr; BEGIN PBHSetVol := noErr END;FUNCTION PBHSetVolSync(paramBlock: WDPBPtr): OSErr; BEGIN PBHSetVolSync := noErr END;FUNCTION PBHSetVolAsync(paramBlock: WDPBPtr): OSErr; BEGIN PBHSetVolAsync := noErr END;FUNCTION PBHGetVol(paramBlock: WDPBPtr;async: BOOLEAN): OSErr; BEGIN PBHGetVol := noErr END;FUNCTION PBHGetVolSync(paramBlock: WDPBPtr): OSErr; BEGIN PBHGetVolSync := noErr END;FUNCTION PBHGetVolAsync(paramBlock: WDPBPtr): OSErr; BEGIN PBHGetVolAsync := noErr END;FUNCTION PBCatMove(paramBlock: CMovePBPtr;async: BOOLEAN): OSErr; BEGIN PBCatMove := noErr END;FUNCTION PBCatMoveSync(paramBlock: CMovePBPtr): OSErr; BEGIN PBCatMoveSync := noErr END;FUNCTION PBCatMoveAsync(paramBlock: CMovePBPtr): OSErr; BEGIN PBCatMoveAsync := noErr END;FUNCTION PBDirCreate(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBDirCreate := noErr END;FUNCTION PBDirCreateSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBDirCreateSync := noErr END;FUNCTION PBDirCreateAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBDirCreateAsync := noErr END;FUNCTION PBGetWDInfo(paramBlock: WDPBPtr;async: BOOLEAN): OSErr; BEGIN PBGetWDInfo := noErr END;FUNCTION PBGetWDInfoSync(paramBlock: WDPBPtr): OSErr; BEGIN PBGetWDInfoSync := noErr END;FUNCTION PBGetWDInfoAsync(paramBlock: WDPBPtr): OSErr; BEGIN PBGetWDInfoAsync := noErr END;FUNCTION PBGetFCBInfo(paramBlock: FCBPBPtr;async: BOOLEAN): OSErr; BEGIN PBGetFCBInfo := noErr END;FUNCTION PBGetFCBInfoSync(paramBlock: FCBPBPtr): OSErr; BEGIN PBGetFCBInfoSync := noErr END;FUNCTION PBGetFCBInfoAsync(paramBlock: FCBPBPtr): OSErr; BEGIN PBGetFCBInfoAsync := noErr END;FUNCTION PBGetCatInfo(paramBlock: CInfoPBPtr;async: BOOLEAN): OSErr; BEGIN PBGetCatInfo := noErr END;FUNCTION PBGetCatInfoSync(paramBlock: CInfoPBPtr): OSErr; BEGIN PBGetCatInfoSync := noErr END;FUNCTION PBGetCatInfoAsync(paramBlock: CInfoPBPtr): OSErr; BEGIN PBGetCatInfoAsync := noErr END;FUNCTION PBSetCatInfo(paramBlock: CInfoPBPtr;async: BOOLEAN): OSErr; BEGIN PBSetCatInfo := noErr END;FUNCTION PBSetCatInfoSync(paramBlock: CInfoPBPtr): OSErr; BEGIN PBSetCatInfoSync := noErr END;FUNCTION PBSetCatInfoAsync(paramBlock: CInfoPBPtr): OSErr; BEGIN PBSetCatInfoAsync := noErr END;FUNCTION PBAllocContig(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBAllocContig := noErr END;FUNCTION PBAllocContigSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBAllocContigSync := noErr END;FUNCTION PBAllocContigAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBAllocContigAsync := noErr END;FUNCTION PBLockRange(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBLockRange := noErr END;FUNCTION PBLockRangeSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBLockRangeSync := noErr END;FUNCTION PBLockRangeAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBLockRangeAsync := noErr END;FUNCTION PBUnlockRange(paramBlock: ParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBUnlockRange := noErr END;FUNCTION PBUnlockRangeSync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBUnlockRangeSync := noErr END;FUNCTION PBUnlockRangeAsync(paramBlock: ParmBlkPtr): OSErr; BEGIN PBUnlockRangeAsync := noErr END;FUNCTION PBSetVInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetVInfo := noErr END;FUNCTION PBSetVInfoSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBSetVInfoSync := noErr END;FUNCTION PBSetVInfoAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBSetVInfoAsync := noErr END;FUNCTION PBHGetVInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHGetVInfo := noErr END;FUNCTION PBHGetVInfoSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetVInfoSync := noErr END;FUNCTION PBHGetVInfoAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetVInfoAsync := noErr END;FUNCTION PBHOpen(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHOpen := noErr END;FUNCTION PBHOpenSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenSync := noErr END;FUNCTION PBHOpenAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenAsync := noErr END;FUNCTION PBHOpenRF(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHOpenRF := noErr END;FUNCTION PBHOpenRFSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenRFSync := noErr END;FUNCTION PBHOpenRFAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenRFAsync := noErr END;FUNCTION PBHOpenDF(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHOpenDF := noErr END;FUNCTION PBHOpenDFSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenDFSync := noErr END;FUNCTION PBHOpenDFAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenDFAsync := noErr END;FUNCTION PBHCreate(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHCreate := noErr END;FUNCTION PBHCreateSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHCreateSync := noErr END;FUNCTION PBHCreateAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHCreateAsync := noErr END;FUNCTION PBHDelete(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHDelete := noErr END;FUNCTION PBHDeleteSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHDeleteSync := noErr END;FUNCTION PBHDeleteAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHDeleteAsync := noErr END;FUNCTION PBHRename(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHRename := noErr END;FUNCTION PBHRenameSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHRenameSync := noErr END;FUNCTION PBHRenameAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHRenameAsync := noErr END;FUNCTION PBHRstFLock(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHRstFLock := noErr END;FUNCTION PBHRstFLockSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHRstFLockSync := noErr END;FUNCTION PBHRstFLockAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHRstFLockAsync := noErr END;FUNCTION PBHSetFLock(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHSetFLock := noErr END;FUNCTION PBHSetFLockSync(paramBlock: HParmBlkPtr): OSErr; BEGIN  PBHSetFLockSync:= noErr END;FUNCTION PBHSetFLockAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHSetFLockAsync := noErr END;FUNCTION PBHGetFInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHGetFInfo := noErr END;FUNCTION PBHGetFInfoSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetFInfoSync := noErr END;FUNCTION PBHGetFInfoAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetFInfoAsync := noErr END;FUNCTION PBHSetFInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHSetFInfo := noErr END;FUNCTION PBHSetFInfoSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHSetFInfoSync := noErr END;FUNCTION PBHSetFInfoAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHSetFInfoAsync := noErr END;FUNCTION PBMakeFSSpec(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBMakeFSSpec := noErr END;FUNCTION PBMakeFSSpecSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBMakeFSSpecSync := noErr END;FUNCTION PBMakeFSSpecAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBMakeFSSpecAsync := noErr END;PROCEDURE FInitQueue; BEGIN END;FUNCTION GetFSQHdr: QHdrPtr; BEGIN GetFSQHdr := new(QHdrPtr) END;FUNCTION GetDrvQHdr: QHdrPtr; BEGIN GetDrvQHdr := new(QHdrPtr) END;FUNCTION GetVCBQHdr: QHdrPtr; BEGIN GetVCBQHdr := new(QHdrPtr) END;FUNCTION HGetVol(volName: StringPtr;VAR vRefNum: INTEGER;VAR dirID: LONGINT): OSErr; BEGIN HGetVol := noErr END;FUNCTION HSetVol(volName: StringPtr;vRefNum: INTEGER;dirID: LONGINT): OSErr; BEGIN HSetVol := noErr END;FUNCTION HOpen(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;permission: SignedByte; VAR refNum: INTEGER): OSErr; BEGIN HOpen := noErr END;FUNCTION HOpenDF(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;permission: SignedByte; VAR refNum: INTEGER): OSErr; BEGIN HOpenDF := noErr END;FUNCTION HOpenRF(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;permission: SignedByte; VAR refNum: INTEGER): OSErr; BEGIN HOpenRF := noErr END;FUNCTION AllocContig(refNum: INTEGER;VAR count: LONGINT): OSErr; BEGIN AllocContig := noErr END;FUNCTION HCreate(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;creator: OSType; fileType: OSType): OSErr; BEGIN HCreate := noErr END;FUNCTION DirCreate(vRefNum: INTEGER;parentDirID: LONGINT;directoryName: Str255; VAR createdDirID: LONGINT): OSErr; BEGIN DirCreate := noErr END;FUNCTION HDelete(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255): OSErr; BEGIN HDelete := noErr END;FUNCTION HGetFInfo(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;VAR fndrInfo: FInfo): OSErr; BEGIN HGetFInfo := noErr END;FUNCTION HSetFInfo(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255;fndrInfo: FInfo): OSErr; BEGIN HSetFInfo := noErr END;FUNCTION HSetFLock(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255): OSErr; BEGIN HSetFLock := noErr END;FUNCTION HRstFLock(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255): OSErr; BEGIN HRstFLock := noErr END;FUNCTION HRename(vRefNum: INTEGER;dirID: LONGINT;oldName: Str255;newName: Str255): OSErr; BEGIN HRename := noErr END;FUNCTION CatMove(vRefNum: INTEGER;dirID: LONGINT;oldName: Str255;newDirID: LONGINT; newName: Str255): OSErr; BEGIN CatMove := noErr END;FUNCTION OpenWD(vRefNum: INTEGER;dirID: LONGINT;procID: LONGINT;VAR wdRefNum: INTEGER): OSErr; BEGIN OpenWD := noErr END;FUNCTION CloseWD(wdRefNum: INTEGER): OSErr; BEGIN CloseWD := noErr END;FUNCTION GetWDInfo(wdRefNum: INTEGER;VAR vRefNum: INTEGER;VAR dirID: LONGINT; VAR procID: LONGINT): OSErr; BEGIN GetWDInfo := noErr END;FUNCTION PBHGetVolParms(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHGetVolParms := noErr END;FUNCTION PBHGetVolParmsSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetVolParmsSync := noErr END;FUNCTION PBHGetVolParmsAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetVolParmsAsync := noErr END;FUNCTION PBHGetLogInInfo(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHGetLogInInfo := noErr END;FUNCTION PBHGetLogInInfoSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetLogInInfoSync := noErr END;FUNCTION PBHGetLogInInfoAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetLogInInfoAsync := noErr END;FUNCTION PBHGetDirAccess(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHGetDirAccess := noErr END;FUNCTION PBHGetDirAccessSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetDirAccessSync := noErr END;FUNCTION PBHGetDirAccessAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHGetDirAccessAsync := noErr END;FUNCTION PBHSetDirAccess(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHSetDirAccess := noErr END;FUNCTION PBHSetDirAccessSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHSetDirAccessSync := noErr END;FUNCTION PBHSetDirAccessAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHSetDirAccessAsync := noErr END;FUNCTION PBHMapID(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHMapID := noErr END;FUNCTION PBHMapIDSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHMapIDSync := noErr END;FUNCTION PBHMapIDAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHMapIDAsync := noErr END;FUNCTION PBHMapName(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHMapName := noErr END;FUNCTION PBHMapNameSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHMapNameSync := noErr END;FUNCTION PBHMapNameAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHMapNameAsync := noErr END;FUNCTION PBHCopyFile(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHCopyFile := noErr END;FUNCTION PBHCopyFileSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHCopyFileSync := noErr END;FUNCTION PBHCopyFileAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHCopyFileAsync := noErr END;FUNCTION PBHMoveRename(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHMoveRename := noErr END;FUNCTION PBHMoveRenameSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHMoveRenameSync := noErr END;FUNCTION PBHMoveRenameAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHMoveRenameAsync := noErr END;FUNCTION PBHOpenDeny(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHOpenDeny := noErr END;FUNCTION PBHOpenDenySync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenDenySync := noErr END;FUNCTION PBHOpenDenyAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenDenyAsync := noErr END;FUNCTION PBHOpenRFDeny(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBHOpenRFDeny := noErr END;FUNCTION PBHOpenRFDenySync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenRFDenySync := noErr END;FUNCTION PBHOpenRFDenyAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBHOpenRFDenyAsync := noErr END;FUNCTION PBExchangeFiles(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBExchangeFiles := noErr END;FUNCTION PBExchangeFilesSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBExchangeFilesSync := noErr END;FUNCTION PBExchangeFilesAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBExchangeFilesAsync := noErr END;FUNCTION PBCreateFileIDRef(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBCreateFileIDRef := noErr END;FUNCTION PBCreateFileIDRefSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBCreateFileIDRefSync := noErr END;FUNCTION PBCreateFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBCreateFileIDRefAsync := noErr END;FUNCTION PBResolveFileIDRef(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBResolveFileIDRef := noErr END;FUNCTION PBResolveFileIDRefSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBResolveFileIDRefSync := noErr END;FUNCTION PBResolveFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBResolveFileIDRefAsync := noErr END;FUNCTION PBDeleteFileIDRef(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBDeleteFileIDRef := noErr END;FUNCTION PBDeleteFileIDRefSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBDeleteFileIDRefSync := noErr END;FUNCTION PBDeleteFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBDeleteFileIDRefAsync := noErr END;FUNCTION PBGetForeignPrivs(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBGetForeignPrivs := noErr END;FUNCTION PBGetForeignPrivsSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBGetForeignPrivsSync := noErr END;FUNCTION PBGetForeignPrivsAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBGetForeignPrivsAsync := noErr END;FUNCTION PBSetForeignPrivs(paramBlock: HParmBlkPtr;async: BOOLEAN): OSErr; BEGIN PBSetForeignPrivs := noErr END;FUNCTION PBSetForeignPrivsSync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBSetForeignPrivsSync := noErr END;FUNCTION PBSetForeignPrivsAsync(paramBlock: HParmBlkPtr): OSErr; BEGIN PBSetForeignPrivsAsync := noErr END;FUNCTION PBDTGetPath(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetPath := noErr END;FUNCTION PBDTCloseDown(paramBlock: DTPBPtr): OSErr; BEGIN PBDTCloseDown := noErr END;FUNCTION PBDTAddIcon(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTAddIcon := noErr END;FUNCTION PBDTAddIconSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTAddIconSync := noErr END;FUNCTION PBDTAddIconAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTAddIconAsync := noErr END;FUNCTION PBDTGetIcon(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTGetIcon := noErr END;FUNCTION PBDTGetIconSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetIconSync := noErr END;FUNCTION PBDTGetIconAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetIconAsync := noErr END;FUNCTION PBDTGetIconInfo(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTGetIconInfo := noErr END;FUNCTION PBDTGetIconInfoSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetIconInfoSync := noErr END;FUNCTION PBDTGetIconInfoAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetIconInfoAsync := noErr END;FUNCTION PBDTAddAPPL(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTAddAPPL := noErr END;FUNCTION PBDTAddAPPLSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTAddAPPLSync := noErr END;FUNCTION PBDTAddAPPLAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTAddAPPLAsync := noErr END;FUNCTION PBDTRemoveAPPL(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTRemoveAPPL := noErr END;FUNCTION PBDTRemoveAPPLSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTRemoveAPPLSync := noErr END;FUNCTION PBDTRemoveAPPLAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTRemoveAPPLAsync := noErr END;FUNCTION PBDTGetAPPL(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTGetAPPL := noErr END;FUNCTION PBDTGetAPPLSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetAPPLSync := noErr END;FUNCTION PBDTGetAPPLAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetAPPLAsync := noErr END;FUNCTION PBDTSetComment(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTSetComment := noErr END;FUNCTION PBDTSetCommentSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTSetCommentSync := noErr END;FUNCTION PBDTSetCommentAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTSetCommentAsync := noErr END;FUNCTION PBDTRemoveComment(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTRemoveComment := noErr END;FUNCTION PBDTRemoveCommentSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTRemoveCommentSync := noErr END;FUNCTION PBDTRemoveCommentAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTRemoveCommentAsync := noErr END;FUNCTION PBDTGetComment(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTGetComment := noErr END;FUNCTION PBDTGetCommentSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetCommentSync := noErr END;FUNCTION PBDTGetCommentAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetCommentAsync := noErr END;FUNCTION PBDTFlush(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTFlush := noErr END;FUNCTION PBDTFlushSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTFlushSync := noErr END;FUNCTION PBDTFlushAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTFlushAsync := noErr END;FUNCTION PBDTReset(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTReset := noErr END;FUNCTION PBDTResetSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTResetSync := noErr END;FUNCTION PBDTResetAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTResetAsync := noErr END;FUNCTION PBDTGetInfo(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTGetInfo := noErr END;FUNCTION PBDTGetInfoSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetInfoSync := noErr END;FUNCTION PBDTGetInfoAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTGetInfoAsync := noErr END;FUNCTION PBDTOpenInform(paramBlock: DTPBPtr): OSErr; BEGIN PBDTOpenInform := noErr END;FUNCTION PBDTDelete(paramBlock: DTPBPtr;async: BOOLEAN): OSErr; BEGIN PBDTDelete := noErr END;FUNCTION PBDTDeleteSync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTDeleteSync := noErr END;FUNCTION PBDTDeleteAsync(paramBlock: DTPBPtr): OSErr; BEGIN PBDTDeleteAsync := noErr END;FUNCTION PBGetVolMountInfoSize(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetVolMountInfoSize := noErr END;FUNCTION PBGetVolMountInfo(paramBlock: ParmBlkPtr): OSErr; BEGIN PBGetVolMountInfo := noErr END;FUNCTION PBVolumeMount(paramBlock: ParmBlkPtr): OSErr; BEGIN PBVolumeMount := noErr END;FUNCTION FSMakeFSSpec(vRefNum: INTEGER;dirID: LONGINT;fileName: Str255; VAR spec: FSSpec): OSErr; BEGIN FSMakeFSSpec := noErr END;FUNCTION FSpOpenDF(spec: FSSpec;permission: SignedByte;VAR refNum: INTEGER): OSErr; BEGIN FSpOpenDF := noErr END;FUNCTION FSpOpenRF(spec: FSSpec ;permission: SignedByte;VAR refNum: INTEGER): OSErr; BEGIN FSpOpenRF := noErr END;FUNCTION FSpCreate(spec: FSSpec ;creator: OSType;fileType: OSType;scriptTag: ScriptCode): OSErr; BEGIN FSpCreate := noErr END;FUNCTION FSpDirCreate(spec: FSSpec;scriptTag: ScriptCode;VAR createdDirID: LONGINT): OSErr; BEGIN FSpDirCreate := noErr END;FUNCTION FSpDelete(spec: FSSpec): OSErr; BEGIN FSpDelete := noErr END;FUNCTION FSpGetFInfo(spec: FSSpec;VAR fndrInfo: FInfo): OSErr; BEGIN FSpGetFInfo := noErr END;FUNCTION FSpSetFInfo(spec: FSSpec;fndrInfo: FInfo): OSErr; BEGIN FSpSetFInfo := noErr END;FUNCTION FSpSetFLock(spec: FSSpec): OSErr; BEGIN FSpSetFLock := noErr END;FUNCTION FSpRstFLock(spec: FSSpec): OSErr; BEGIN FSpRstFLock := noErr END;FUNCTION FSpRename(spec: FSSpec;newName: Str255): OSErr; BEGIN FSpRename := noErr END;FUNCTION FSpCatMove(source: FSSpec;dest: FSSpec): OSErr; BEGIN FSpCatMove := noErr END;FUNCTION FSpExchangeFiles(source: FSSpec;dest: FSSpec): OSErr; BEGIN FSpExchangeFiles := noErr END; END.