{Created: Saturday, July 27, 1991 at 9:45 PM Menus.p Pascal Interface to the Macintosh Libraries  Copyright Apple Computer, Inc. 1985-1992  All rights reserved	Change History (most recent first):		<24>	 6/26/92	DCL		Miner Formatting Changes. Digging deep for things to do. Getting									the file ready for ETO 8.		<23>	 3/27/92	DC		number not known <KSM> - added InsertIntlResMenu and									reindtroduced InsertFontResMenu		<22>	  3/9/92	DCL		For New Improved Inside Mac: Added Call names without Abbrevs.:									AppendResMenu (AddResMenu), DeleteMCEntries (DelMCEntries),									DeleteMenuItem (DelMenuItem), DisposeMCInfo (DispMCInfo),									GetMenuHandle (GetMHandle), InsertMenuItem (InsMenuItem),									SetMenuItemText (SetItem), GetMenuItemText (GetItem). Affected									Files: Menus.[ph], Traps.[aph].		<21>	 2/28/92	DCL		Moved GetMBarHeight from Script.p to Menus.p		<20>	 2/17/92	MH		Remove defintion of InsertFontResMenu.  Not part of public									interface (yet?)		<19>	 9/17/91	MH		params of InsertFontResMenu to standard DB output format		<18>	 8/22/91	KSM		DCC,#Bruges: Added utility routine InsertFontResMenu for Finder.		<17>	 7/30/91	JL		Updated Copyright.		<16>	 6/14/91	JL		Moved SavedBits to the Private Interface File: MenuMgrPriv.p.		<15>	  2/4/91	JL		changed parameter name iconNum to iconIndex.		<14>	 1/30/91	gbm		abcdfsn: Well, when you move identifiers to another file I think									you should remove them from the one they are in...		<13>	 1/29/91	JL		Moved SaveBits, RestoreBits, and DiscardBits to MenuMgrPriv		<12>	 1/28/91	LN		Checked in Database Generated File from DSG. Added		<11>	 11/3/90	JAL		Fixing MCTable putting back to an Array [0..0].		<10>	 10/3/90	JAL		Updated MenuCRsrc.		 <9>	 5/31/90	KSM		Now that I did the thing in the To Do section, remove the To Do									reminder comment...		 <8>	 5/31/90	KSM		Forgot to declare type for SaveBits.		 <7>	 5/31/90	KSM		Add Save/Restore/Discard Bits calls.		 <6>	 4/11/90	KSM		Add the InvalMenuBar trap.		 <5>	  3/5/90	BBH		Added mDrawItemMsg and mCalcItemMsg		 <4>	  3/2/90	BBH		Added mDrawItemMsg and mCalcItemMsg	To Do:} UNIT Menus; INTERFACE USES Types, Quickdraw;CONSTnoMark = 0;							{mark symbol for MarkItem}{ menu defProc messages }mDrawMsg = 0;mChooseMsg = 1;mSizeMsg = 2;mDrawItemMsg = 4;mCalcItemMsg = 5;textMenuProc = 0;hMenuCmd = 27;						{itemCmd == 0x001B ==> hierarchical menu}hierMenu = -1;						{a hierarchical menu - for InsertMenu call}mPopUpMsg = 3;						{menu defProc messages - place yourself}mctAllItems = -98;					{search for all Items for the given ID}mctLastIDIndic = -99;				{last color table entry has this in ID field}TYPEMenuPtr = ^MenuInfo;MenuHandle = ^MenuPtr;MenuInfo = RECORD menuID: INTEGER; menuWidth: INTEGER; menuHeight: INTEGER; menuProc: Handle; enableFlags: LONGINT; menuData: Str255; END;MCEntryPtr = ^MCEntry;MCEntry = RECORD mctID: INTEGER;					{menu ID.  ID = 0 is the menu bar} mctItem: INTEGER;					{menu Item. Item = 0 is a title} mctRGB1: RGBColor;					{usage depends on ID and Item} mctRGB2: RGBColor;					{usage depends on ID and Item} mctRGB3: RGBColor;					{usage depends on ID and Item} mctRGB4: RGBColor;					{usage depends on ID and Item} mctReserved: INTEGER;				{reserved for internal use} END;MCTablePtr = ^MCTable;MCTableHandle = ^MCTablePtr;MCTable = ARRAY [0..0] OF MCEntry;	{ the entries themselves }MenuCRsrcPtr = ^MenuCRsrc;MenuCRsrcHandle = ^MenuCRsrcPtr;MenuCRsrc = RECORD numEntries: INTEGER;				{number of entries} mcEntryRecs: MCTable;				{ARRAY [1..numEntries] of MCEntry} END;PROCEDURE InitMenus;FUNCTION NewMenu(menuID: INTEGER;menuTitle: Str255): MenuHandle;FUNCTION GetMenu(resourceID: INTEGER): MenuHandle;PROCEDURE DisposeMenu(theMenu: MenuHandle);PROCEDURE AppendMenu(menu: MenuHandle;data: Str255);PROCEDURE AddResMenu(theMenu: MenuHandle;theType: ResType);PROCEDURE AppendResMenu(theMenu: MenuHandle;theType: ResType);PROCEDURE InsertResMenu(theMenu: MenuHandle;theType: ResType;afterItem: INTEGER);PROCEDURE InsertMenu(theMenu: MenuHandle;beforeID: INTEGER);PROCEDURE DrawMenuBar;PROCEDURE InvalMenuBar;PROCEDURE DeleteMenu(menuID: INTEGER);PROCEDURE ClearMenuBar;FUNCTION GetNewMBar(menuBarID: INTEGER): Handle;FUNCTION GetMenuBar: Handle;FUNCTION GetMBarHeight: INTEGER;PROCEDURE SetMenuBar(menuList: Handle);PROCEDURE InsMenuItem(theMenu: MenuHandle;itemString: Str255;afterItem: INTEGER);PROCEDURE InsertMenuItem(theMenu: MenuHandle;itemString: Str255;afterItem: INTEGER);PROCEDURE DelMenuItem(theMenu: MenuHandle;item: INTEGER);PROCEDURE DeleteMenuItem(theMenu: MenuHandle;item: INTEGER);FUNCTION MenuKey(ch: CHAR): LONGINT;PROCEDURE HiliteMenu(menuID: INTEGER);PROCEDURE SetItem(theMenu: MenuHandle;item: INTEGER;itemString: Str255);PROCEDURE SetMenuItemText(theMenu: MenuHandle;item: INTEGER;itemString: Str255);PROCEDURE GetItem(theMenu: MenuHandle;item: INTEGER;VAR itemString: Str255);PROCEDURE GetMenuItemText(theMenu: MenuHandle;item: INTEGER;VAR itemString: Str255);PROCEDURE DisableItem(theMenu: MenuHandle;item: INTEGER);PROCEDURE EnableItem(theMenu: MenuHandle;item: INTEGER);PROCEDURE CheckItem(theMenu: MenuHandle;item: INTEGER;checked: BOOLEAN);PROCEDURE SetItemMark(theMenu: MenuHandle;item: INTEGER;markChar: CHAR);PROCEDURE GetItemMark(theMenu: MenuHandle;item: INTEGER;VAR markChar: CHAR);PROCEDURE SetItemIcon(theMenu: MenuHandle;item: INTEGER;iconIndex: Byte);PROCEDURE GetItemIcon(theMenu: MenuHandle;item: INTEGER;VAR iconIndex: Byte);PROCEDURE SetItemStyle(theMenu: MenuHandle;item: INTEGER;chStyle: Style);PROCEDURE GetItemStyle(theMenu: MenuHandle;item: INTEGER;VAR chStyle: Style);PROCEDURE CalcMenuSize(theMenu: MenuHandle);FUNCTION CountMItems(theMenu: MenuHandle): INTEGER;FUNCTION GetMHandle(menuID: INTEGER): MenuHandle;FUNCTION GetMenuHandle(menuID: INTEGER): MenuHandle;PROCEDURE FlashMenuBar(menuID: INTEGER);PROCEDURE SetMenuFlash(count: INTEGER);FUNCTION MenuSelect(startPt: Point): LONGINT;PROCEDURE InitProcMenu(resID: INTEGER);PROCEDURE GetItemCmd(theMenu: MenuHandle;item: INTEGER;VAR cmdChar: CHAR);PROCEDURE SetItemCmd(theMenu: MenuHandle;item: INTEGER;cmdChar: CHAR);FUNCTION PopUpMenuSelect(menu: MenuHandle;top: INTEGER;left: INTEGER;popUpItem: INTEGER): LONGINT;FUNCTION MenuChoice: LONGINT;PROCEDURE DelMCEntries(menuID: INTEGER;menuItem: INTEGER);PROCEDURE DeleteMCEntries(menuID: INTEGER;menuItem: INTEGER);FUNCTION GetMCInfo: MCTableHandle;PROCEDURE SetMCInfo(menuCTbl: MCTableHandle);PROCEDURE DispMCInfo(menuCTbl: MCTableHandle);PROCEDURE DisposeMCInfo(menuCTbl: MCTableHandle);FUNCTION GetMCEntry(menuID: INTEGER;menuItem: INTEGER): MCEntryPtr;PROCEDURE SetMCEntries(numEntries: INTEGER; menuCEntries: MCTablePtr);PROCEDURE InsertFontResMenu(theMenu: MenuHandle; afterItem: INTEGER;scriptFilter: INTEGER);PROCEDURE InsertIntlResMenu(theMenu: MenuHandle; theType: ResType;afterItem: INTEGER;    scriptFilter: INTEGER);IMPLEMENTATIONPROCEDURE InitMenus;BEGIN END;FUNCTION NewMenu(menuID: INTEGER;menuTitle: Str255): MenuHandle;BEGIN NewMenu := new(MenuHandle) END;FUNCTION GetMenu(resourceID: INTEGER): MenuHandle;BEGIN GetMenu := new(MenuHandle) END;PROCEDURE DisposeMenu(theMenu: MenuHandle);BEGIN END;PROCEDURE AppendMenu(menu: MenuHandle;data: Str255);BEGIN END;PROCEDURE AddResMenu(theMenu: MenuHandle;theType: ResType);BEGIN END;PROCEDURE AppendResMenu(theMenu: MenuHandle;theType: ResType);BEGIN END;PROCEDURE InsertResMenu(theMenu: MenuHandle;theType: ResType;afterItem: INTEGER);BEGIN END;PROCEDURE InsertMenu(theMenu: MenuHandle;beforeID: INTEGER);BEGIN END;PROCEDURE DrawMenuBar;BEGIN END;PROCEDURE InvalMenuBar;BEGIN END;PROCEDURE DeleteMenu(menuID: INTEGER);BEGIN END;PROCEDURE ClearMenuBar;BEGIN END;FUNCTION GetNewMBar(menuBarID: INTEGER): Handle;BEGIN GetNewMBar := new(Handle) END;FUNCTION GetMenuBar: Handle;BEGIN GetMenuBar := new(Handle) END;FUNCTION GetMBarHeight: INTEGER;BEGIN GetMBarHeight := 0 END;PROCEDURE SetMenuBar(menuList: Handle);BEGIN END;PROCEDURE InsMenuItem(theMenu: MenuHandle;itemString: Str255;afterItem: INTEGER);BEGIN END;PROCEDURE InsertMenuItem(theMenu: MenuHandle;itemString: Str255;afterItem: INTEGER);BEGIN END;PROCEDURE DelMenuItem(theMenu: MenuHandle;item: INTEGER);BEGIN END;PROCEDURE DeleteMenuItem(theMenu: MenuHandle;item: INTEGER);BEGIN END;FUNCTION MenuKey(ch: CHAR): LONGINT;BEGIN MenuKey := 0 END;PROCEDURE HiliteMenu(menuID: INTEGER);BEGIN END;PROCEDURE SetItem(theMenu: MenuHandle;item: INTEGER; itemString:Str255);BEGIN END;PROCEDURE SetMenuItemText(theMenu: MenuHandle;item: INTEGER;itemString: Str255);BEGIN END;PROCEDURE GetItem(theMenu: MenuHandle;item: INTEGER; VAR itemString: Str255);BEGIN END;PROCEDURE GetMenuItemText(theMenu: MenuHandle;item: INTEGER;VAR itemString: Str255);BEGIN END;PROCEDURE DisableItem(theMenu: MenuHandle;item: INTEGER);BEGIN END;PROCEDURE EnableItem(theMenu: MenuHandle;item: INTEGER);BEGIN END;PROCEDURE CheckItem(theMenu: MenuHandle;item: INTEGER; checked:BOOLEAN);BEGIN END;PROCEDURE SetItemMark(theMenu: MenuHandle;item: INTEGER; markChar:CHAR);BEGIN END;PROCEDURE GetItemMark(theMenu: MenuHandle;item: INTEGER; VAR markChar: CHAR);BEGIN END;PROCEDURE SetItemIcon(theMenu: MenuHandle;item: INTEGER; iconIndex: Byte);BEGIN END;PROCEDURE GetItemIcon(theMenu: MenuHandle;item: INTEGER; VAR iconIndex:Byte);BEGIN END;PROCEDURE SetItemStyle(theMenu: MenuHandle;item: INTEGER; chStyle:Style) ;BEGIN END;PROCEDURE GetItemStyle(theMenu: MenuHandle;item: INTEGER; VAR chStyle:Style);BEGIN END;PROCEDURE CalcMenuSize(theMenu: MenuHandle);BEGIN END;FUNCTION CountMItems(theMenu: MenuHandle): INTEGER;BEGIN CountMItems := 0 END;FUNCTION GetMHandle(menuID: INTEGER): MenuHandle;BEGIN GetMHandle := new(MenuHandle) END;FUNCTION GetMenuHandle(menuID: INTEGER): MenuHandle;BEGIN GetMenuHandle := new(MenuHandle) END;PROCEDURE FlashMenuBar(menuID: INTEGER);BEGIN END;PROCEDURE SetMenuFlash(count: INTEGER);BEGIN END;FUNCTION MenuSelect(startPt: Point): LONGINT;BEGIN MenuSelect := 0 END;PROCEDURE InitProcMenu(resID: INTEGER);BEGIN END;PROCEDURE GetItemCmd(theMenu: MenuHandle;item: INTEGER;VAR cmdChar: CHAR);BEGIN END;PROCEDURE SetItemCmd(theMenu: MenuHandle;item: INTEGER;cmdChar: CHAR);BEGIN END;FUNCTION PopUpMenuSelect(menu: MenuHandle;top: INTEGER;left: INTEGER;popUpItem: INTEGER): LONGINT;BEGIN PopUpMenuSelect := 0 END;FUNCTION MenuChoice: LONGINT;BEGIN MenuChoice := 0 END;PROCEDURE DelMCEntries(menuID: INTEGER;menuItem: INTEGER);BEGIN END;PROCEDURE DeleteMCEntries(menuID: INTEGER;menuItem: INTEGER);BEGIN END;FUNCTION GetMCInfo: MCTableHandle;BEGIN GetMCInfo := new(MCTableHandle) END;PROCEDURE SetMCInfo(menuCTbl: MCTableHandle);BEGIN END;PROCEDURE DispMCInfo(menuCTbl: MCTableHandle);BEGIN END;PROCEDURE DisposeMCInfo(menuCTbl: MCTableHandle);BEGIN END;FUNCTION GetMCEntry(menuID: INTEGER;menuItem: INTEGER): MCEntryPtr;BEGIN GetMCEntry := new(MCEntryPtr) END;PROCEDURE SetMCEntries(numEntries: INTEGER; menuCEntries: MCTablePtr);BEGIN END;PROCEDURE InsertFontResMenu(theMenu: MenuHandle; afterItem: INTEGER;scriptFilter: INTEGER);BEGIN END;PROCEDURE InsertIntlResMenu(theMenu: MenuHandle; theType: ResType;afterItem: INTEGER;    scriptFilter: INTEGER);BEGIN END; END.