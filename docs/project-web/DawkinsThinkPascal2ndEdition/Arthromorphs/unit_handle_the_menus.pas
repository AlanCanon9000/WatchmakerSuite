unit unit_handle_the_menus;{File name :  HandleTheMenus.Pas  }{Function: Handle all menu selections.}{          This procedure is called when a menu item is selected.}{          There is one CASE statement for all Lists.  There is}{          another CASE for all the commands in each List.}{History: 12/12/90 Original by Prototyper.   }{                       }interface	uses Types, Quickdraw, Menus, TextEdit, Desk,		unit_my_globals, unit_ted, unit_richard, unit_error_alert, unit_preferences, unit_engineering_window, unit_genome_window, unit_breeding_window, unit_about_arthromorphs, unit_init_the_menus;	procedure Handle_My_Menu (var doneFlag: boolean; theMenu, theItem: integer; var theInput: TEHandle);{Handle menu selection}implementation	procedure Handle_My_Menu;   		{Handle menu selections realtime}		const			L_Apple = 1001; 			{Menu list}			C_About_Arthromorphs = 1;			L_File = 1002;  			{Menu list}			C_New = 1;			C_Open = 2;			C_Close = 4;			C_Save = 5;			C_Save_As = 6;			C_Quit = 8;			L_Edit = 1003;  			{Menu list}			C_Undo = 1;			C_Cut = 3;			C_Copy = 4;			C_Paste = 5;			C_Clear = 6;			C_Select_All = 7;			C_Show_Clipboard = 9;			L_Operation = 1004; 		{Menu list}			C_Breed = 1;			C_Show_as_Text = 2;			C_Engineer = 3;			L_View = 1005;  			{Menu list}			C_Preferences = 1;		var			DNA: integer;  			{For opening DAs}			BoolHolder: boolean;   	{For SystemEdit result}			DAName: Str255;    		{For getting DA name}			SavePort: GrafPtr; 		{Save current port when opening DAs}	begin   							{Start of procedure}		case theMenu of 			{Do selected menu list}			L_Apple: 				begin					case theItem of{Handle all commands in this menu list}						C_About_Arthromorphs: 							begin								Open_About_Arthromorphs(theInput);{Open a window for this menu selection}							end;						otherwise   	{Handle the DAs}							begin   		{Start of Otherwise}								GetPort(SavePort);{Save the current port}								GetItem(AppleMenu, theItem, DAName);{Get the name of the DA selected}								DNA := OpenDeskAcc(DAName);{Open the DA selected}								SetPort(SavePort);{Restore to the saved port}							end;    		{End of Otherwise}					end;    			{End of item case}				end;    				{End for this list}			L_File: 				begin					case theItem of{Handle all commands in this menu list}						C_New: 							begin								NewMinimal;								Open_Breeding_Window(theInput);{Open a window for this menu selection}							end;						C_Open: 							begin								Open_Breeding_Window(theInput);{Open a window for this menu selection}								LoadArthromorph;							{Call the SFGetFile OS routine}							end;						C_Close: 							begin							{Call the SFPutFile OS routine}							end;						C_Save: 							begin								SaveArthromorph;							{Call the SFPutFile OS routine}							end;						C_Save_As: 							begin								SaveArthromorph;							{Call the SFPutFile OS routine}							end;						C_Quit: 							begin								doneFlag := TRUE;							end;						otherwise							begin   		{Start of the Otherwise}							end;    		{End of Otherwise}					end;    			{End of item case}				end;    				{End for this list}			L_Edit: 				begin					BoolHolder := SystemEdit(theItem - 1);{Let the DA do the edit to itself}					if not (BoolHolder) then{If not a DA then we get it}						begin   			{Handle by using a Case statment}							case theItem of{Handle all commands in this menu list}								C_Undo: 									begin										A_Error_Alert;{Call a alert for this menu selection}									end;								C_Cut: 									begin								{?? ADD IN HERE WHAT THIS COMMAND SHOULD DO}									end;								C_Copy: 									begin								{?? ADD IN HERE WHAT THIS COMMAND SHOULD DO}									end;								C_Paste: 									begin								{?? ADD IN HERE WHAT THIS COMMAND SHOULD DO}									end;								C_Clear: 									begin								{?? ADD IN HERE WHAT THIS COMMAND SHOULD DO}									end;								C_Select_All: 									begin								{?? ADD IN HERE WHAT THIS COMMAND SHOULD DO}									end;								C_Show_Clipboard: 									begin								{?? ADD IN HERE WHAT THIS COMMAND SHOULD DO}									end;								otherwise{Send to a DA}									begin   	{Start of the Otherwise}									end;    	{End of Otherwise}							end;    			{End of not BoolHolder}						end;    			{End of item case}				end;    				{End for this list}			L_Operation: 				begin					case theItem of{Handle all commands in this menu list}						C_Breed: 							begin								Open_Breeding_Window(theInput);{Open a window for this menu selection}								Breed;							end;						C_Show_as_Text: 							begin								PrintMiddle;								Close_Breeding_Window(WindowPtr(ord4(-1)), theInput);							end;						C_Engineer: 							begin								repeat									D_Engineering_Window;								until AgreeToExit;								Close_Genome_Window(WindowPtr(ord4(-1)), theInput);{Close a window for this menu selection}							end;						otherwise							begin   		{Start of the Otherwise}							end;    		{End of Otherwise}					end;    			{End of item case}				end;    				{End for this list}			L_View: 				begin					case theItem of{Handle all commands in this menu list}						C_Preferences: 							begin								Close_Breeding_Window(WindowPtr(ord4(-1)), theInput);								D_Preferences;{Call a dialog for this menu selection}							end;						otherwise							begin   		{Start of the Otherwise}							end;    		{End of Otherwise}					end;    			{End of item case}				end;    				{End for this list}			otherwise				begin   				{Start of the Otherwise}				end;    				{End of Otherwise}		end;    					{End for the Lists}		HiliteMenu(0);  			{Turn menu selection off}	end;    							{End of procedure Handle_My_Menu}end.    								{End of unit}