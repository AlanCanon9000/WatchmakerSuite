unit unit_engineering_window;{File name:  Engineering_Window.Pas  }{Function: Handle a dialog}{History: 1/4/91 Original by Prototyper.   }{                       }interface	uses Types, Quickdraw, Memory, TextEdit, Dialogs, Controls, Windows, QuickdrawText,	Fonts, unit_my_globals, unit_ted, unit_richard, unit_error_alert;	procedure D_Engineering_Window;implementation	const   								{These are the item numbers for controls in the Dialog}		I_OK = 1;		I_All = 2;		I_None = 3;		I_All4 = 4;		I_None6 = 5;		I_Cancel = 6;		I_Animal_Trunk = 7;		I_Animal_Legs = 8;		I_Animal_Claws = 9;		I_Section_Trunk = 10;		I_Section_Legs = 11;		I_Section_Claws = 12;		I_Segment_Trunk = 13;		I_Segment_Legs = 14;		I_Segment_Claws = 15;		I_Length = 16;		I_Height = 17;		I_Angle = 18;		I_Duplication = 19;		I_Deletion = 20;		I_Legs = 21;		I_Claws = 22;		I = 23;		I_0 = 24;		I27 = 25;		I_Focus_on_1st_seg = 26;		I_Focus_on_last_seg = 27;		I_No_focus = 28;		I_x = 29;		I_x33 = 30;		I_Rectangle1 = 31;		I_Rectangle2 = 32;		I_Rectangle4 = 33;		I_Rectangle138 = 34;	var		ExitDialog, Accept: boolean;   		{Flag used to exit the Dialog}		DoubleClick: boolean;  		{Flag to say that a double click on a list happened}		MyPt: Point;   				{Current list selection point}		MyErr: OSErr;  				{OS error returned}		DearthOfAtomMuts, DearthOfBodyMuts, AnimalOrClawsOnly, DupDeleteOnly: boolean;	procedure D_Engineering_Window;		var			GetSelection: DialogPtr;{Pointer to this dialog}			tempRect: Rect;    		{Temporary rectangle}			DType: Integer;    		{Type of dialog item}			Index: Integer;    		{For looping}			DItem: Handle; 			{Handle to the dialog item}			CItem, CTempItem: controlhandle;{Control handle}			sTemp: Str255; 			{Get text entered, temp holding}			itemHit: Integer;  		{Get selection}			temp: Integer; 			{Get selection, temp holding}			dataBounds: Rect;  		{Rect to setup the list}			cSize: Point;  			{Pointer to a cell in a list}			Icon_Handle: Handle;   	{Temp handle to read an Icon into}			NewMouse: Point;   		{Mouse location during tracking Icon presses}			InIcon: boolean;   		{Flag to say pressed in an Icon}			ThisEditText: TEHandle; {Handle to get the Dialogs TE record}			TheDialogPtr: DialogPeek;{Pointer to Dialogs definition record, contains the TE record}	{This is an update routine for non-controls in the dialog}	{This is executed after the dialog is uncovered by an alert}		procedure Refresh_Dialog;   		{Refresh the dialogs non-controls}			var				rTempRect: Rect;     		{Temp rectangle used for drawing}		begin			SetPort(GetSelection);  	{Point to our dialog window}			rTempRect := tempRect;  	{Save the current contents of  tempRect}			GetDItem(GetSelection, I_OK, DType, DItem, tempRect);{Get the item handle}			PenSize(3, 3);  			{Change pen to draw thick default outline}			InsetRect(tempRect, -4, -4);{Draw outside the button by 1 pixel}			FrameRoundRect(tempRect, 16, 16); {Draw the outline}			PenSize(1, 1);  			{Restore the pen size to the default value}			{Draw a rectangle, Rectangle1  }			SetRect(TempRect, 18, 35, 170, 286);{left,top,right,bottom}			FrameRect(TempRect);    	{Frame this rectangle area}			{Draw a rectangle, Rectangle2  }			SetRect(TempRect, 191, 36, 326, 196);{left,top,right,bottom}			FrameRect(TempRect);    	{Frame this rectangle area}			{Draw a rectangle, Rectangle4  }			SetRect(TempRect, 192, 215, 327, 273);{left,top,right,bottom}			FrameRect(TempRect);    	{Frame this rectangle area}			{Draw a rectangle, Rectangle1  }			SetRect(TempRect, 16, 292, 170, 361);{left,top,right,bottom}			FrameRect(TempRect);    	{Frame this rectangle area}			tempRect := rTempRect;  	{Restore the current contents of  tempRect}		end;		procedure AdjustCheckBoxes;		begin			{Setup initial conditions}			GetDItem(GetSelection, I_Animal_Trunk, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(AnimalTrunkMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Animal_Legs, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(AnimalLegsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Animal_Claws, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(AnimalClawsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Section_Trunk, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(SectionTrunkMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Section_Legs, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(SectionLegsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Section_Claws, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(SectionClawsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Segment_Trunk, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(SegmentTrunkMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Segment_Legs, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(SegmentLegsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Segment_Claws, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(SegmentClawsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Legs, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(LegsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Claws, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(ClawsMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Length, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(WidthMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Height, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(HeightMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Angle, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(AngleMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Duplication, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(DuplicationMut));  	{Check the checkbox}			GetDItem(GetSelection, I_Deletion, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(DeletionMut));  	{Check the checkbox}{And  now the radio buttons}			GetDItem(GetSelection, 23, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(MutationPressure = positive));			GetDItem(GetSelection, 24, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(MutationPressure = zero));			GetDItem(GetSelection, 25, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(MutationPressure = negative));			GetDItem(GetSelection, 26, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(FocusOfAttention = FirstSegmentOnly));			GetDItem(GetSelection, 27, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(FocusOfAttention = LastSegmentOnly));			GetDItem(GetSelection, 28, DType, DItem, tempRect);{Get the item handle}			CItem := Pointer(DItem);{Change dialog handle to control handle}			SetCtlValue(CItem, integer(FocusOfAttention = AnySegment));		end; {AdjustCheckBoxes}	begin   							{Start of dialog handler}		GetSelection := GetNewDialog(4, nil, Pointer(-1));{Bring in the dialog resource}		ShowWindow(GetSelection);{Open a dialog box}		SelectWindow(GetSelection);{Lets see it}		SetPort(GetSelection);  	{Prepare to add conditional text}		TheDialogPtr := DialogPeek(GetSelection);{Get to the inner record}		ThisEditText := TheDialogPtr^.textH;{Get to the TE record}		HLock(Handle(ThisEditText));{Lock it for safety}		ThisEditText^^.txSize := 12;{TE Point size}		TextSize(12);   			{Window Point size}		ThisEditText^^.txFont := systemFont;{TE Font ID}		TextFont(systemFont);   	{Window Font ID}		ThisEditText^^.txFont := 0;{TE Font ID}		ThisEditText^^.fontAscent := 12;{Font ascent}		ThisEditText^^.lineHeight := 12 + 3 + 1;{Font ascent + descent + leading}		HUnLock(Handle(ThisEditText));{UnLock the handle when done}		AdjustCheckBoxes;		Refresh_Dialog;     		{Draw any Lists, popups, lines, or rectangles}		ExitDialog := FALSE;  		{Do not exit dialog handle loop yet}		repeat  					{Start of dialog handle loop}			ModalDialog(nil, itemHit);{Wait until an item is hit}			GetDItem(GetSelection, itemHit, DType, DItem, tempRect);{Get item information}			CItem := Pointer(DItem);{Get the control handle}				{Handle it real time}			if (ItemHit = I_OK) then{Handle the Button being pressed}				begin					Accept := true;					{?? Code to handle this button goes here}					ExitDialog := TRUE;{Exit the dialog when this selection is made}					Refresh_Dialog;				end;    				{End for this item selected}			if (ItemHit = I_All) then{Handle the Button being pressed}				begin					MakeAllBodyMutations(true);					AdjustCheckBoxes;					{?? Code to handle this button goes here}					Refresh_Dialog;				end;    				{End for this item selected}			if (ItemHit = I_None) then{Handle the Button being pressed}				begin					MakeAllBodyMutations(false);					AdjustCheckBoxes;					{?? Code to handle this button goes here}					Refresh_Dialog;				end;    				{End for this item selected}			if (ItemHit = I_All4) then{Handle the Button being pressed}				begin					MakeAllAtomMutations(true);					AdjustCheckBoxes;					{?? Code to handle this button goes here}					Refresh_Dialog;				end;    				{End for this item selected}			if (ItemHit = I_None6) then{Handle the Button being pressed}				begin					MakeAllAtomMutations(false);					AdjustCheckBoxes;					{?? Code to handle this button goes here}					Refresh_Dialog;				end;    				{End for this item selected}			if (ItemHit = I_Cancel) then{Handle the Button being pressed}				begin					Accept := false;					{?? Code to handle this button goes here}					ExitDialog := TRUE;{Exit the dialog when this selection is made}					Refresh_Dialog;				end;    				{End for this item selected}			if (ItemHit = I_Animal_Trunk) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					AnimalTrunkMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Animal_Legs) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					AnimalLegsMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Animal_Claws) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					AnimalClawsMut := not boolean(temp);    			{End for this item checked}				end;    				{End for this item selected}			if (ItemHit = I_Section_Trunk) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					SectionTrunkMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Section_Legs) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					SectionLegsMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Section_Claws) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					SectionClawsMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Segment_Trunk) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					SegmentTrunkMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Segment_Legs) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					SegmentLegsMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Segment_Claws) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					SegmentClawsMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Length) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					WidthMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Height) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					HeightMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Angle) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					AngleMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Duplication) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					DuplicationMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Deletion) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					DeletionMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Legs) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					LegsMut := not boolean(temp);				end;    				{End for this item selected}			if (ItemHit = I_Claws) then{Handle the checkbox being pressed}				begin					temp := GetCtlValue(CItem);{Get the current Checkbox value}					SetCtlValue(CItem, (temp + 1) mod 2);{Toggle the value to the opposite}					LegsMut := not boolean(temp);    			{End for this item checked}				end;    				{End for this item selected}			if (ItemHit >= I) and (ItemHit <= I27) then{Handle the Radio selection}				begin					for Index := I to I27 do{Clear all other radios}						begin							GetDItem(GetSelection, Index, DType, DItem, tempRect);{Get the Radio handle}							CTempItem := Pointer(DItem);{Convert to a control handle}							SetCtlValue(CTempItem, 0);{Turn the radio selection OFF}						end;    			{End of clear the radio selections loop}					SetCtlValue(CItem, 1);{Turn the one radio selection ON}				end;    				{End for this item selected}			if (ItemHit >= I_Focus_on_1st_seg) and (ItemHit <= I_No_focus) then{Handle the Radio selection}				begin					for Index := I_Focus_on_1st_seg to I_No_focus do{Clear all other radios}						begin							GetDItem(GetSelection, Index, DType, DItem, tempRect);{Get the Radio handle}							CTempItem := Pointer(DItem);{Convert to a control handle}							SetCtlValue(CTempItem, 0);{Turn the radio selection OFF}						end;    			{End of clear the radio selections loop}					SetCtlValue(CItem, 1);{Turn the one radio selection ON}				end;    				{End for this item selected}		until ExitDialog;   		{Handle dialog items until exit selected}{Get results after dialog}		if Accept then			begin				DearthOfAtomMuts := true;				DearthOfBodyMuts := true;				AnimalOrClawsOnly := true;				DupDeleteOnly := true;				GetDItem(GetSelection, I_Deletion, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				DeletionMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if DeletionMut then					DearthOfAtomMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Deletion HERE}				GetDItem(GetSelection, I_Duplication, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				DuplicationMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if DuplicationMut then					DearthOfAtomMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Duplication HERE}				GetDItem(GetSelection, I_Angle, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				AngleMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if AngleMut then					begin						DearthOfAtomMuts := false;						DupDeleteOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Angle HERE}				GetDItem(GetSelection, I_Height, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				HeightMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if HeightMut then					begin						DearthOfAtomMuts := false;						DupDeleteOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Height HERE}				GetDItem(GetSelection, I_Length, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				WidthMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if WidthMut then					begin						DearthOfAtomMuts := false;						DupDeleteOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Length HERE}				GetDItem(GetSelection, I_Animal_Trunk, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				AnimalTrunkMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if AnimalTrunkMut then					DearthOfBodyMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Animal Trunk HERE}				GetDItem(GetSelection, I_Animal_Legs, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				AnimalLegsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if AnimalLegsMut then					DearthOfBodyMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Animal Legs HERE}				GetDItem(GetSelection, I_Animal_Claws, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				AnimalClawsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if AnimalClawsMut then					DearthOfBodyMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Animal Claws HERE}				GetDItem(GetSelection, I_Section_Trunk, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				SectionTrunkMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if SectionTrunkMut then					begin						DearthOfBodyMuts := false;						AnimalOrClawsOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Section Trunk HERE}				GetDItem(GetSelection, I_Section_Legs, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				SectionLegsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if SectionLegsMut then					begin						DearthOfBodyMuts := false;						AnimalOrClawsOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Section Legs HERE}				GetDItem(GetSelection, I_Section_Claws, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				SectionClawsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if SectionClawsMut then					DearthOfBodyMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Section Claws HERE}				GetDItem(GetSelection, I_Segment_Trunk, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				SegmentTrunkMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if SegmentTrunkMut then					begin						DearthOfBodyMuts := false;						AnimalOrClawsOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Segment Trunk HERE}				GetDItem(GetSelection, I_Segment_Legs, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				SegmentLegsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if SegmentLegsMut then					begin						DearthOfBodyMuts := false;						AnimalOrClawsOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Segment Legs HERE}				GetDItem(GetSelection, I_Segment_Claws, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				SegmentClawsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if SegmentClawsMut then					DearthOfBodyMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Segment Claws HERE}				GetDItem(GetSelection, I_Legs, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				LegsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if LegsMut then					begin						DearthOfBodyMuts := false;						AnimalOrClawsOnly := false;					end;			{??? HANDLE THE CHECKBOX RESULT FOR  Legs HERE}				GetDItem(GetSelection, I_Claws, DType, DItem, tempRect);{Get the Checkbox handle}				CItem := Pointer(DItem);{Change dialog handle to control handle}				ClawsMut := boolean(GetCtlValue(CItem));{Get the checkbox value}				if ClawsMut then					DearthOfBodyMuts := false;			{??? HANDLE THE CHECKBOX RESULT FOR  Claws HERE}				Index := I;   				{Start at the first radio in this group}				repeat  					{Look until we have found the radio selected}					GetDItem(GetSelection, Index, DType, DItem, tempRect);{Get the radio handle}					CItem := Pointer(DItem);{Change dialog handle to control handle}					temp := GetCtlValue(CItem);{Get the radio value}					Index := Index + 1;{Go to next radio}				until (temp <> 0) or (Index > I27);{Go till we find it}				temp := Index - I + 1; 		{The indexed radio selection}				case temp of					2: 						MutationPressure := positive;					3: 						mutationPressure := zero;					4: 						MutationPressure := negative;				end; {cases}			{??? HANDLE THE RADIO RESULT FOR  I TO I27 HERE}				Index := I_Focus_on_1st_seg;{Start at the first radio in this group}				repeat  					{Look until we have found the radio selected}					GetDItem(GetSelection, Index, DType, DItem, tempRect);{Get the radio handle}					CItem := Pointer(DItem);{Change dialog handle to control handle}					temp := GetCtlValue(CItem);{Get the radio value}					Index := Index + 1;{Go to next radio}				until (temp <> 0) or (Index > I_No_focus);{Go till we find it}				temp := Index - I_Focus_on_1st_seg + 1;{The indexed radio selection}				case temp of					2: 						FocusOfAttention := FirstSegmentOnly;					3: 						FocusOfAttention := LastSegmentOnly;					4: 						FocusOfAttention := AnySegment;				end; {cases}			{??? HANDLE THE RADIO RESULT FOR  I_Focus_on_1st_seg TO I_No_focus HERE}				AgreeToExit := True;				if DearthOfAtomMuts then					begin						AgreeToExit := false;						TellError('You must allow at least one class of mutation');					end;				if DearthOfBodyMuts then					begin						AgreeToExit := false;						TellError('You must allow at least one body part to mutate');					end;				if AnimalOrClawsOnly and DupDeleteOnly then					begin						AgreeToExit := false;						TellError('You cannot duplicate or delete claws or whole animal');					end;			end {OK button pressed}		else			AgreeToExit := true; {Cancel button pressed}		DisposDialog(GetSelection);{Flush the dialog out of memory}	end;    							{End of procedure}end.    							{End of unit}