unit BreedWindow;{File name: BreedWindow}{Function: Handle a Window}{ History: 20/6/91 Original by Prototyper 3.0   }interface	uses		PCommonExhibition, Common_Exhibition, {Common and types}		PUtils_Exhibition, Utils_Exhibition,{General Utilities}		Warning_Alert,{Alerts}		Timing_Dialogue, biomorphs;{Modal Dialogs}	{Initialize us so all our routines can be activated}	procedure U_Init_BreedWindow;	{Close our window}	procedure U_Close_BreedWindow;	{Handle resizing scrollbars}	procedure U_Resized_BreedWindow (OldRect: Rect);	{Our window was moved}	procedure U_Moved_BreedWindow (OldRect: Rect);	{Update our window, someone uncovered a part of us}	procedure U_Update_BreedWindow;	{Open our window and draw everything}	procedure U_Open_BreedWindow;	{Handle activation of our window}	procedure U_Activate_BreedWindow (Do_An_Activate: boolean);	{Handle any special events in out window}	procedure U_DoEvent_BreedWindow (var myEvent: EventRecord);{=======================================================}implementation{=======================================================}	{Routine: U_Init_BreedWindow}	{Purpose: Initialize our window data to not in use yet}	procedure U_Init_BreedWindow;	begin	end;{=======================================================}	{Routine: U_Close_BreedWindow}	{Purpose: Close out the window}	procedure U_Close_BreedWindow;	begin			{Our window is   WPtr_BreedWindow }		disposeWindow(WPtr_BreedWindow);	end;     																	{End of procedure}{=======================================================}	{Routine: U_Resized_BreedWindow}	{Purpose: We were resized or zoomed, update the scrolling scrollbars}	{	OldRect is the size of the window before the resize}	{	Use   WPtr_BreedWindow^.PortRect  for the new size }	procedure U_Resized_BreedWindow;  								{Resized this window}	begin			{Our window is   WPtr_BreedWindow }	end;     																	{End of procedure}{=======================================================}	{Routine: U_Moved_BreedWindow}	{Purpose: We were moved, possibly to another screen and screen depth}	{	OldRect is the size of the window before the resize}	{	Use   WPtr_BreedWindow^.PortRect  for the new size }	procedure U_Moved_BreedWindow;   								{Moved this window}	begin			{Our window is   WPtr_BreedWindow }	end;     																	{End of procedure}{=======================================================}	{Routine: U_UpDate_BreedWindow}	{Purpose: Update our window}	procedure U_UpDate_BreedWindow;	begin			{Our window is   WPtr_BreedWindow }		myUpdate(WPtr_BreedWindow);	end;     																	{End of procedure}{=======================================================}	{Routine: U_Open_BreedWindow}	{Purpose: Open our window}	procedure U_Open_BreedWindow;	begin		if (WPtr_BreedWindow <> nil) then 							{See if  opened OK}			begin				WPtr_BreedWindow^.portRect := ScreenBits.bounds;				myOpen(WPtr_BreedWindow)			end;   															{End for if (MyWindow<>nil)}	end; 																	{End of procedure}{=======================================================}	{Routine: U_Activate_BreedWindow}	{Purpose: We activated or deactivated.}	procedure U_Activate_BreedWindow;     							{Activated or deactivated this window}	begin		if (Do_An_Activate) then     									{Handle the activate}			begin			end    															{End for activate}		else			begin  															{Start of deactivate}			end;   															{End for deactivate}	end;     																	{End of procedure}{=======================================================}{=======================================================}	{Routine: U_DoEvent_BreedWindow}	{Purpose: Handle any special window events}	procedure U_DoEvent_BreedWindow;	begin     																{Handle U_DoEvent_}		myDoEvent(myEvent.where)	end; 																	{end of Handle U_DoEvent_}	{=================================}end.    																		{End of unit}