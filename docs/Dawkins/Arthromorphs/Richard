unit Richard;interface	uses		MyGlobals, Ted;	procedure MakeAllBodyMutations (State: boolean);	procedure MakeAllAtomMutations (State: boolean);	procedure PrintMiddle;implementation	procedure MakeAllBodyMutations (State: boolean);	begin		TrunkMut := State;		LegsMut := State;		ClawsMut := State;		AnimalTrunkMut := State;		AnimalLegsMut := State;		AnimalClawsMut := State;		SectionTrunkMut := State;		SectionLegsMut := State;		SectionClawsMut := State;		SegmentTrunkMut := State;		SegmentLegsMut := State;		SegmentClawsMut := State;	end;	procedure MakeAllAtomMutations (State: boolean);	begin		WidthMut := State;		HeightMut := State;		AngleMut := State;		DuplicationMut := State;		DeletionMut := State;	end;	procedure PrintAt (this: Atom);	begin		with this do			begin				write(Height : 10 : 2, Width : 10 : 2, Angle : 10 : 2, '     ');				case kind of					AnimalTrunk: 						write('AnimalTrunk');					AnimalJoint: 						write('    AnimalJoint');					AnimalClaw: 						write('    AnimalClaw');					SectionTrunk: 						write('        SectionTrunk');					SectionJoint: 						write('            SectionJoint');					SectionClaw: 						write('            SectionClaw');					SegmentTrunk: 						begin							SegmentCounter := SegmentCounter + 1;							write('                SegmentTrunk', SegmentCounter);						end;					SegmentJoint: 						write('                    SegmentJoint');					SegmentClaw: 						write('                    SegmentClaw');					Joint: 						write('                        Joint');					Claw: 						write('                        Claw');				end; {cases}				writeln;			end	end; {PrintAt}	procedure Print (which: integer);   {Print this animal}   {Recursively step through the animal}		var			this: Atom;	begin		this := BoneYard[which]^^;		with this do			begin				if kind <> free then					PrintAt(this);				if FirstBelowMe <> 0 then					Print(FirstBelowMe);				if (NextLikeMe <> 0) and (kind <> AnimalTrunk) then					Print(NextLikeMe);			end	end;	procedure PrintMiddle;		var			sub: integer;			r: rect;	begin		r := Prect;		r.top := 60;		SetTextRect(r);		showtext;		rewrite(output);		writeln('Height ' : 10, 'Width' : 10, 'Angle' : 10);		sub := BreedersChoice[MidBox];		SegmentCounter := 0;		if sub > 0 then			if BoneYard[sub]^^.kind = AnimalTrunk then				Print(BreedersChoice[MidBox]);	end;end.